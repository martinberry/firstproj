/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.incubate.framework.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ThriftRequest implements org.apache.thrift.TBase<ThriftRequest, ThriftRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftRequest");

  private static final org.apache.thrift.protocol.TField DECLARED_INTERFACE_FIELD_DESC = new org.apache.thrift.protocol.TField("declaredInterface", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("method", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMPL_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("implClass", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ThriftRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ThriftRequestTupleSchemeFactory());
  }

  public String declaredInterface; // required
  public String method; // required
  public String parameters; // optional
  public String implClass; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DECLARED_INTERFACE((short)1, "declaredInterface"),
    METHOD((short)2, "method"),
    PARAMETERS((short)3, "parameters"),
    IMPL_CLASS((short)4, "implClass");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DECLARED_INTERFACE
          return DECLARED_INTERFACE;
        case 2: // METHOD
          return METHOD;
        case 3: // PARAMETERS
          return PARAMETERS;
        case 4: // IMPL_CLASS
          return IMPL_CLASS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PARAMETERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DECLARED_INTERFACE, new org.apache.thrift.meta_data.FieldMetaData("declaredInterface", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.METHOD, new org.apache.thrift.meta_data.FieldMetaData("method", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPL_CLASS, new org.apache.thrift.meta_data.FieldMetaData("implClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftRequest.class, metaDataMap);
  }

  public ThriftRequest() {
  }

  public ThriftRequest(
    String declaredInterface,
    String method,
    String implClass)
  {
    this();
    this.declaredInterface = declaredInterface;
    this.method = method;
    this.implClass = implClass;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThriftRequest(ThriftRequest other) {
    if (other.isSetDeclaredInterface()) {
      this.declaredInterface = other.declaredInterface;
    }
    if (other.isSetMethod()) {
      this.method = other.method;
    }
    if (other.isSetParameters()) {
      this.parameters = other.parameters;
    }
    if (other.isSetImplClass()) {
      this.implClass = other.implClass;
    }
  }

  public ThriftRequest deepCopy() {
    return new ThriftRequest(this);
  }

  @Override
  public void clear() {
    this.declaredInterface = null;
    this.method = null;
    this.parameters = null;
    this.implClass = null;
  }

  public String getDeclaredInterface() {
    return this.declaredInterface;
  }

  public ThriftRequest setDeclaredInterface(String declaredInterface) {
    this.declaredInterface = declaredInterface;
    return this;
  }

  public void unsetDeclaredInterface() {
    this.declaredInterface = null;
  }

  /** Returns true if field declaredInterface is set (has been assigned a value) and false otherwise */
  public boolean isSetDeclaredInterface() {
    return this.declaredInterface != null;
  }

  public void setDeclaredInterfaceIsSet(boolean value) {
    if (!value) {
      this.declaredInterface = null;
    }
  }

  public String getMethod() {
    return this.method;
  }

  public ThriftRequest setMethod(String method) {
    this.method = method;
    return this;
  }

  public void unsetMethod() {
    this.method = null;
  }

  /** Returns true if field method is set (has been assigned a value) and false otherwise */
  public boolean isSetMethod() {
    return this.method != null;
  }

  public void setMethodIsSet(boolean value) {
    if (!value) {
      this.method = null;
    }
  }

  public String getParameters() {
    return this.parameters;
  }

  public ThriftRequest setParameters(String parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public String getImplClass() {
    return this.implClass;
  }

  public ThriftRequest setImplClass(String implClass) {
    this.implClass = implClass;
    return this;
  }

  public void unsetImplClass() {
    this.implClass = null;
  }

  /** Returns true if field implClass is set (has been assigned a value) and false otherwise */
  public boolean isSetImplClass() {
    return this.implClass != null;
  }

  public void setImplClassIsSet(boolean value) {
    if (!value) {
      this.implClass = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DECLARED_INTERFACE:
      if (value == null) {
        unsetDeclaredInterface();
      } else {
        setDeclaredInterface((String)value);
      }
      break;

    case METHOD:
      if (value == null) {
        unsetMethod();
      } else {
        setMethod((String)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((String)value);
      }
      break;

    case IMPL_CLASS:
      if (value == null) {
        unsetImplClass();
      } else {
        setImplClass((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DECLARED_INTERFACE:
      return getDeclaredInterface();

    case METHOD:
      return getMethod();

    case PARAMETERS:
      return getParameters();

    case IMPL_CLASS:
      return getImplClass();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DECLARED_INTERFACE:
      return isSetDeclaredInterface();
    case METHOD:
      return isSetMethod();
    case PARAMETERS:
      return isSetParameters();
    case IMPL_CLASS:
      return isSetImplClass();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThriftRequest)
      return this.equals((ThriftRequest)that);
    return false;
  }

  public boolean equals(ThriftRequest that) {
    if (that == null)
      return false;

    boolean this_present_declaredInterface = true && this.isSetDeclaredInterface();
    boolean that_present_declaredInterface = true && that.isSetDeclaredInterface();
    if (this_present_declaredInterface || that_present_declaredInterface) {
      if (!(this_present_declaredInterface && that_present_declaredInterface))
        return false;
      if (!this.declaredInterface.equals(that.declaredInterface))
        return false;
    }

    boolean this_present_method = true && this.isSetMethod();
    boolean that_present_method = true && that.isSetMethod();
    if (this_present_method || that_present_method) {
      if (!(this_present_method && that_present_method))
        return false;
      if (!this.method.equals(that.method))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    boolean this_present_implClass = true && this.isSetImplClass();
    boolean that_present_implClass = true && that.isSetImplClass();
    if (this_present_implClass || that_present_implClass) {
      if (!(this_present_implClass && that_present_implClass))
        return false;
      if (!this.implClass.equals(that.implClass))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ThriftRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ThriftRequest typedOther = (ThriftRequest)other;

    lastComparison = Boolean.valueOf(isSetDeclaredInterface()).compareTo(typedOther.isSetDeclaredInterface());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeclaredInterface()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.declaredInterface, typedOther.declaredInterface);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMethod()).compareTo(typedOther.isSetMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.method, typedOther.method);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, typedOther.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImplClass()).compareTo(typedOther.isSetImplClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImplClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.implClass, typedOther.implClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThriftRequest(");
    boolean first = true;

    sb.append("declaredInterface:");
    if (this.declaredInterface == null) {
      sb.append("null");
    } else {
      sb.append(this.declaredInterface);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("method:");
    if (this.method == null) {
      sb.append("null");
    } else {
      sb.append(this.method);
    }
    first = false;
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("implClass:");
    if (this.implClass == null) {
      sb.append("null");
    } else {
      sb.append(this.implClass);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (declaredInterface == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'declaredInterface' was not present! Struct: " + toString());
    }
    if (method == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'method' was not present! Struct: " + toString());
    }
    if (implClass == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'implClass' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ThriftRequestStandardSchemeFactory implements SchemeFactory {
    public ThriftRequestStandardScheme getScheme() {
      return new ThriftRequestStandardScheme();
    }
  }

  private static class ThriftRequestStandardScheme extends StandardScheme<ThriftRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DECLARED_INTERFACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.declaredInterface = iprot.readString();
              struct.setDeclaredInterfaceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.method = iprot.readString();
              struct.setMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parameters = iprot.readString();
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMPL_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.implClass = iprot.readString();
              struct.setImplClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.declaredInterface != null) {
        oprot.writeFieldBegin(DECLARED_INTERFACE_FIELD_DESC);
        oprot.writeString(struct.declaredInterface);
        oprot.writeFieldEnd();
      }
      if (struct.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        oprot.writeString(struct.method);
        oprot.writeFieldEnd();
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          oprot.writeString(struct.parameters);
          oprot.writeFieldEnd();
        }
      }
      if (struct.implClass != null) {
        oprot.writeFieldBegin(IMPL_CLASS_FIELD_DESC);
        oprot.writeString(struct.implClass);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ThriftRequestTupleSchemeFactory implements SchemeFactory {
    public ThriftRequestTupleScheme getScheme() {
      return new ThriftRequestTupleScheme();
    }
  }

  private static class ThriftRequestTupleScheme extends TupleScheme<ThriftRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ThriftRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.declaredInterface);
      oprot.writeString(struct.method);
      oprot.writeString(struct.implClass);
      BitSet optionals = new BitSet();
      if (struct.isSetParameters()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetParameters()) {
        oprot.writeString(struct.parameters);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ThriftRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.declaredInterface = iprot.readString();
      struct.setDeclaredInterfaceIsSet(true);
      struct.method = iprot.readString();
      struct.setMethodIsSet(true);
      struct.implClass = iprot.readString();
      struct.setImplClassIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.parameters = iprot.readString();
        struct.setParametersIsSet(true);
      }
    }
  }

}

