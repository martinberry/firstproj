/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ztravel.paygate.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 单笔支付请求(签名)
 */
public class PaySignRequest implements org.apache.thrift.TBase<PaySignRequest, PaySignRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaySignRequest");

  private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("amount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField FG_NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("fgNotifyUrl", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BG_NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("bgNotifyUrl", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MOBILE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNo", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MOBILE_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isMobilePay", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField EXTRA_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("extraInfos", org.apache.thrift.protocol.TType.MAP, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PaySignRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PaySignRequestTupleSchemeFactory());
  }

  /**
   * partner
   */
  public String partner; // optional
  /**
   * 订单号
   */
  public String orderNum; // required
  /**
   * 订单金额
   */
  public long amount; // required
  /**
   * 商品详情
   */
  public String comment; // optional
  /**
   * 银行前台通知url
   */
  public String fgNotifyUrl; // optional
  /**
   * 银行后台通知url
   */
  public String bgNotifyUrl; // required
  /**
   * 手机号
   */
  public String mobileNo; // optional
  /**
   * 是否手机支付
   */
  public boolean isMobilePay; // optional
  /**
   * 其他的参数信息
   */
  public Map<String,String> extraInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * partner
     */
    PARTNER((short)1, "partner"),
    /**
     * 订单号
     */
    ORDER_NUM((short)2, "orderNum"),
    /**
     * 订单金额
     */
    AMOUNT((short)3, "amount"),
    /**
     * 商品详情
     */
    COMMENT((short)4, "comment"),
    /**
     * 银行前台通知url
     */
    FG_NOTIFY_URL((short)5, "fgNotifyUrl"),
    /**
     * 银行后台通知url
     */
    BG_NOTIFY_URL((short)6, "bgNotifyUrl"),
    /**
     * 手机号
     */
    MOBILE_NO((short)7, "mobileNo"),
    /**
     * 是否手机支付
     */
    IS_MOBILE_PAY((short)8, "isMobilePay"),
    /**
     * 其他的参数信息
     */
    EXTRA_INFOS((short)9, "extraInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER
          return PARTNER;
        case 2: // ORDER_NUM
          return ORDER_NUM;
        case 3: // AMOUNT
          return AMOUNT;
        case 4: // COMMENT
          return COMMENT;
        case 5: // FG_NOTIFY_URL
          return FG_NOTIFY_URL;
        case 6: // BG_NOTIFY_URL
          return BG_NOTIFY_URL;
        case 7: // MOBILE_NO
          return MOBILE_NO;
        case 8: // IS_MOBILE_PAY
          return IS_MOBILE_PAY;
        case 9: // EXTRA_INFOS
          return EXTRA_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AMOUNT_ISSET_ID = 0;
  private static final int __ISMOBILEPAY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PARTNER,_Fields.COMMENT,_Fields.FG_NOTIFY_URL,_Fields.MOBILE_NO,_Fields.IS_MOBILE_PAY,_Fields.EXTRA_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("amount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FG_NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("fgNotifyUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BG_NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("bgNotifyUrl", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOBILE_NO, new org.apache.thrift.meta_data.FieldMetaData("mobileNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_MOBILE_PAY, new org.apache.thrift.meta_data.FieldMetaData("isMobilePay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTRA_INFOS, new org.apache.thrift.meta_data.FieldMetaData("extraInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaySignRequest.class, metaDataMap);
  }

  public PaySignRequest() {
    this.isMobilePay = false;

  }

  public PaySignRequest(
    String orderNum,
    long amount,
    String bgNotifyUrl)
  {
    this();
    this.orderNum = orderNum;
    this.amount = amount;
    setAmountIsSet(true);
    this.bgNotifyUrl = bgNotifyUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaySignRequest(PaySignRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartner()) {
      this.partner = other.partner;
    }
    if (other.isSetOrderNum()) {
      this.orderNum = other.orderNum;
    }
    this.amount = other.amount;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetFgNotifyUrl()) {
      this.fgNotifyUrl = other.fgNotifyUrl;
    }
    if (other.isSetBgNotifyUrl()) {
      this.bgNotifyUrl = other.bgNotifyUrl;
    }
    if (other.isSetMobileNo()) {
      this.mobileNo = other.mobileNo;
    }
    this.isMobilePay = other.isMobilePay;
    if (other.isSetExtraInfos()) {
      Map<String,String> __this__extraInfos = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.extraInfos.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__extraInfos_copy_key = other_element_key;

        String __this__extraInfos_copy_value = other_element_value;

        __this__extraInfos.put(__this__extraInfos_copy_key, __this__extraInfos_copy_value);
      }
      this.extraInfos = __this__extraInfos;
    }
  }

  public PaySignRequest deepCopy() {
    return new PaySignRequest(this);
  }

  @Override
  public void clear() {
    this.partner = null;
    this.orderNum = null;
    setAmountIsSet(false);
    this.amount = 0;
    this.comment = null;
    this.fgNotifyUrl = null;
    this.bgNotifyUrl = null;
    this.mobileNo = null;
    this.isMobilePay = false;

    this.extraInfos = null;
  }

  /**
   * partner
   */
  public String getPartner() {
    return this.partner;
  }

  /**
   * partner
   */
  public PaySignRequest setPartner(String partner) {
    this.partner = partner;
    return this;
  }

  public void unsetPartner() {
    this.partner = null;
  }

  /** Returns true if field partner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartner() {
    return this.partner != null;
  }

  public void setPartnerIsSet(boolean value) {
    if (!value) {
      this.partner = null;
    }
  }

  /**
   * 订单号
   */
  public String getOrderNum() {
    return this.orderNum;
  }

  /**
   * 订单号
   */
  public PaySignRequest setOrderNum(String orderNum) {
    this.orderNum = orderNum;
    return this;
  }

  public void unsetOrderNum() {
    this.orderNum = null;
  }

  /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNum() {
    return this.orderNum != null;
  }

  public void setOrderNumIsSet(boolean value) {
    if (!value) {
      this.orderNum = null;
    }
  }

  /**
   * 订单金额
   */
  public long getAmount() {
    return this.amount;
  }

  /**
   * 订单金额
   */
  public PaySignRequest setAmount(long amount) {
    this.amount = amount;
    setAmountIsSet(true);
    return this;
  }

  public void unsetAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  /** Returns true if field amount is set (has been assigned a value) and false otherwise */
  public boolean isSetAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __AMOUNT_ISSET_ID);
  }

  public void setAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AMOUNT_ISSET_ID, value);
  }

  /**
   * 商品详情
   */
  public String getComment() {
    return this.comment;
  }

  /**
   * 商品详情
   */
  public PaySignRequest setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  /**
   * 银行前台通知url
   */
  public String getFgNotifyUrl() {
    return this.fgNotifyUrl;
  }

  /**
   * 银行前台通知url
   */
  public PaySignRequest setFgNotifyUrl(String fgNotifyUrl) {
    this.fgNotifyUrl = fgNotifyUrl;
    return this;
  }

  public void unsetFgNotifyUrl() {
    this.fgNotifyUrl = null;
  }

  /** Returns true if field fgNotifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetFgNotifyUrl() {
    return this.fgNotifyUrl != null;
  }

  public void setFgNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.fgNotifyUrl = null;
    }
  }

  /**
   * 银行后台通知url
   */
  public String getBgNotifyUrl() {
    return this.bgNotifyUrl;
  }

  /**
   * 银行后台通知url
   */
  public PaySignRequest setBgNotifyUrl(String bgNotifyUrl) {
    this.bgNotifyUrl = bgNotifyUrl;
    return this;
  }

  public void unsetBgNotifyUrl() {
    this.bgNotifyUrl = null;
  }

  /** Returns true if field bgNotifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetBgNotifyUrl() {
    return this.bgNotifyUrl != null;
  }

  public void setBgNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.bgNotifyUrl = null;
    }
  }

  /**
   * 手机号
   */
  public String getMobileNo() {
    return this.mobileNo;
  }

  /**
   * 手机号
   */
  public PaySignRequest setMobileNo(String mobileNo) {
    this.mobileNo = mobileNo;
    return this;
  }

  public void unsetMobileNo() {
    this.mobileNo = null;
  }

  /** Returns true if field mobileNo is set (has been assigned a value) and false otherwise */
  public boolean isSetMobileNo() {
    return this.mobileNo != null;
  }

  public void setMobileNoIsSet(boolean value) {
    if (!value) {
      this.mobileNo = null;
    }
  }

  /**
   * 是否手机支付
   */
  public boolean isIsMobilePay() {
    return this.isMobilePay;
  }

  /**
   * 是否手机支付
   */
  public PaySignRequest setIsMobilePay(boolean isMobilePay) {
    this.isMobilePay = isMobilePay;
    setIsMobilePayIsSet(true);
    return this;
  }

  public void unsetIsMobilePay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMOBILEPAY_ISSET_ID);
  }

  /** Returns true if field isMobilePay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMobilePay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMOBILEPAY_ISSET_ID);
  }

  public void setIsMobilePayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMOBILEPAY_ISSET_ID, value);
  }

  public int getExtraInfosSize() {
    return (this.extraInfos == null) ? 0 : this.extraInfos.size();
  }

  public void putToExtraInfos(String key, String val) {
    if (this.extraInfos == null) {
      this.extraInfos = new HashMap<String,String>();
    }
    this.extraInfos.put(key, val);
  }

  /**
   * 其他的参数信息
   */
  public Map<String,String> getExtraInfos() {
    return this.extraInfos;
  }

  /**
   * 其他的参数信息
   */
  public PaySignRequest setExtraInfos(Map<String,String> extraInfos) {
    this.extraInfos = extraInfos;
    return this;
  }

  public void unsetExtraInfos() {
    this.extraInfos = null;
  }

  /** Returns true if field extraInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraInfos() {
    return this.extraInfos != null;
  }

  public void setExtraInfosIsSet(boolean value) {
    if (!value) {
      this.extraInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER:
      if (value == null) {
        unsetPartner();
      } else {
        setPartner((String)value);
      }
      break;

    case ORDER_NUM:
      if (value == null) {
        unsetOrderNum();
      } else {
        setOrderNum((String)value);
      }
      break;

    case AMOUNT:
      if (value == null) {
        unsetAmount();
      } else {
        setAmount((Long)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case FG_NOTIFY_URL:
      if (value == null) {
        unsetFgNotifyUrl();
      } else {
        setFgNotifyUrl((String)value);
      }
      break;

    case BG_NOTIFY_URL:
      if (value == null) {
        unsetBgNotifyUrl();
      } else {
        setBgNotifyUrl((String)value);
      }
      break;

    case MOBILE_NO:
      if (value == null) {
        unsetMobileNo();
      } else {
        setMobileNo((String)value);
      }
      break;

    case IS_MOBILE_PAY:
      if (value == null) {
        unsetIsMobilePay();
      } else {
        setIsMobilePay((Boolean)value);
      }
      break;

    case EXTRA_INFOS:
      if (value == null) {
        unsetExtraInfos();
      } else {
        setExtraInfos((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER:
      return getPartner();

    case ORDER_NUM:
      return getOrderNum();

    case AMOUNT:
      return Long.valueOf(getAmount());

    case COMMENT:
      return getComment();

    case FG_NOTIFY_URL:
      return getFgNotifyUrl();

    case BG_NOTIFY_URL:
      return getBgNotifyUrl();

    case MOBILE_NO:
      return getMobileNo();

    case IS_MOBILE_PAY:
      return Boolean.valueOf(isIsMobilePay());

    case EXTRA_INFOS:
      return getExtraInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER:
      return isSetPartner();
    case ORDER_NUM:
      return isSetOrderNum();
    case AMOUNT:
      return isSetAmount();
    case COMMENT:
      return isSetComment();
    case FG_NOTIFY_URL:
      return isSetFgNotifyUrl();
    case BG_NOTIFY_URL:
      return isSetBgNotifyUrl();
    case MOBILE_NO:
      return isSetMobileNo();
    case IS_MOBILE_PAY:
      return isSetIsMobilePay();
    case EXTRA_INFOS:
      return isSetExtraInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaySignRequest)
      return this.equals((PaySignRequest)that);
    return false;
  }

  public boolean equals(PaySignRequest that) {
    if (that == null)
      return false;

    boolean this_present_partner = true && this.isSetPartner();
    boolean that_present_partner = true && that.isSetPartner();
    if (this_present_partner || that_present_partner) {
      if (!(this_present_partner && that_present_partner))
        return false;
      if (!this.partner.equals(that.partner))
        return false;
    }

    boolean this_present_orderNum = true && this.isSetOrderNum();
    boolean that_present_orderNum = true && that.isSetOrderNum();
    if (this_present_orderNum || that_present_orderNum) {
      if (!(this_present_orderNum && that_present_orderNum))
        return false;
      if (!this.orderNum.equals(that.orderNum))
        return false;
    }

    boolean this_present_amount = true;
    boolean that_present_amount = true;
    if (this_present_amount || that_present_amount) {
      if (!(this_present_amount && that_present_amount))
        return false;
      if (this.amount != that.amount)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_fgNotifyUrl = true && this.isSetFgNotifyUrl();
    boolean that_present_fgNotifyUrl = true && that.isSetFgNotifyUrl();
    if (this_present_fgNotifyUrl || that_present_fgNotifyUrl) {
      if (!(this_present_fgNotifyUrl && that_present_fgNotifyUrl))
        return false;
      if (!this.fgNotifyUrl.equals(that.fgNotifyUrl))
        return false;
    }

    boolean this_present_bgNotifyUrl = true && this.isSetBgNotifyUrl();
    boolean that_present_bgNotifyUrl = true && that.isSetBgNotifyUrl();
    if (this_present_bgNotifyUrl || that_present_bgNotifyUrl) {
      if (!(this_present_bgNotifyUrl && that_present_bgNotifyUrl))
        return false;
      if (!this.bgNotifyUrl.equals(that.bgNotifyUrl))
        return false;
    }

    boolean this_present_mobileNo = true && this.isSetMobileNo();
    boolean that_present_mobileNo = true && that.isSetMobileNo();
    if (this_present_mobileNo || that_present_mobileNo) {
      if (!(this_present_mobileNo && that_present_mobileNo))
        return false;
      if (!this.mobileNo.equals(that.mobileNo))
        return false;
    }

    boolean this_present_isMobilePay = true && this.isSetIsMobilePay();
    boolean that_present_isMobilePay = true && that.isSetIsMobilePay();
    if (this_present_isMobilePay || that_present_isMobilePay) {
      if (!(this_present_isMobilePay && that_present_isMobilePay))
        return false;
      if (this.isMobilePay != that.isMobilePay)
        return false;
    }

    boolean this_present_extraInfos = true && this.isSetExtraInfos();
    boolean that_present_extraInfos = true && that.isSetExtraInfos();
    if (this_present_extraInfos || that_present_extraInfos) {
      if (!(this_present_extraInfos && that_present_extraInfos))
        return false;
      if (!this.extraInfos.equals(that.extraInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PaySignRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PaySignRequest typedOther = (PaySignRequest)other;

    lastComparison = Boolean.valueOf(isSetPartner()).compareTo(typedOther.isSetPartner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, typedOther.partner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNum()).compareTo(typedOther.isSetOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, typedOther.orderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAmount()).compareTo(typedOther.isSetAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amount, typedOther.amount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFgNotifyUrl()).compareTo(typedOther.isSetFgNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFgNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fgNotifyUrl, typedOther.fgNotifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBgNotifyUrl()).compareTo(typedOther.isSetBgNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBgNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bgNotifyUrl, typedOther.bgNotifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMobileNo()).compareTo(typedOther.isSetMobileNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMobileNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNo, typedOther.mobileNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMobilePay()).compareTo(typedOther.isSetIsMobilePay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMobilePay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMobilePay, typedOther.isMobilePay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraInfos()).compareTo(typedOther.isSetExtraInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraInfos, typedOther.extraInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PaySignRequest(");
    boolean first = true;

    if (isSetPartner()) {
      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("orderNum:");
    if (this.orderNum == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amount:");
    sb.append(this.amount);
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetFgNotifyUrl()) {
      if (!first) sb.append(", ");
      sb.append("fgNotifyUrl:");
      if (this.fgNotifyUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.fgNotifyUrl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("bgNotifyUrl:");
    if (this.bgNotifyUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.bgNotifyUrl);
    }
    first = false;
    if (isSetMobileNo()) {
      if (!first) sb.append(", ");
      sb.append("mobileNo:");
      if (this.mobileNo == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNo);
      }
      first = false;
    }
    if (isSetIsMobilePay()) {
      if (!first) sb.append(", ");
      sb.append("isMobilePay:");
      sb.append(this.isMobilePay);
      first = false;
    }
    if (isSetExtraInfos()) {
      if (!first) sb.append(", ");
      sb.append("extraInfos:");
      if (this.extraInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.extraInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderNum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderNum' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'amount' because it's a primitive and you chose the non-beans generator.
    if (bgNotifyUrl == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bgNotifyUrl' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaySignRequestStandardSchemeFactory implements SchemeFactory {
    public PaySignRequestStandardScheme getScheme() {
      return new PaySignRequestStandardScheme();
    }
  }

  private static class PaySignRequestStandardScheme extends StandardScheme<PaySignRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaySignRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partner = iprot.readString();
              struct.setPartnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNum = iprot.readString();
              struct.setOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.amount = iprot.readI64();
              struct.setAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FG_NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fgNotifyUrl = iprot.readString();
              struct.setFgNotifyUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BG_NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bgNotifyUrl = iprot.readString();
              struct.setBgNotifyUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MOBILE_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mobileNo = iprot.readString();
              struct.setMobileNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MOBILE_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMobilePay = iprot.readBool();
              struct.setIsMobilePayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXTRA_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.extraInfos = new HashMap<String,String>(2*_map0.size);
                for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                {
                  String _key2; // required
                  String _val3; // required
                  _key2 = iprot.readString();
                  _val3 = iprot.readString();
                  struct.extraInfos.put(_key2, _val3);
                }
                iprot.readMapEnd();
              }
              struct.setExtraInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaySignRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partner != null) {
        if (struct.isSetPartner()) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderNum != null) {
        oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
        oprot.writeString(struct.orderNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.amount);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fgNotifyUrl != null) {
        if (struct.isSetFgNotifyUrl()) {
          oprot.writeFieldBegin(FG_NOTIFY_URL_FIELD_DESC);
          oprot.writeString(struct.fgNotifyUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.bgNotifyUrl != null) {
        oprot.writeFieldBegin(BG_NOTIFY_URL_FIELD_DESC);
        oprot.writeString(struct.bgNotifyUrl);
        oprot.writeFieldEnd();
      }
      if (struct.mobileNo != null) {
        if (struct.isSetMobileNo()) {
          oprot.writeFieldBegin(MOBILE_NO_FIELD_DESC);
          oprot.writeString(struct.mobileNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsMobilePay()) {
        oprot.writeFieldBegin(IS_MOBILE_PAY_FIELD_DESC);
        oprot.writeBool(struct.isMobilePay);
        oprot.writeFieldEnd();
      }
      if (struct.extraInfos != null) {
        if (struct.isSetExtraInfos()) {
          oprot.writeFieldBegin(EXTRA_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraInfos.size()));
            for (Map.Entry<String, String> _iter4 : struct.extraInfos.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaySignRequestTupleSchemeFactory implements SchemeFactory {
    public PaySignRequestTupleScheme getScheme() {
      return new PaySignRequestTupleScheme();
    }
  }

  private static class PaySignRequestTupleScheme extends TupleScheme<PaySignRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaySignRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.orderNum);
      oprot.writeI64(struct.amount);
      oprot.writeString(struct.bgNotifyUrl);
      BitSet optionals = new BitSet();
      if (struct.isSetPartner()) {
        optionals.set(0);
      }
      if (struct.isSetComment()) {
        optionals.set(1);
      }
      if (struct.isSetFgNotifyUrl()) {
        optionals.set(2);
      }
      if (struct.isSetMobileNo()) {
        optionals.set(3);
      }
      if (struct.isSetIsMobilePay()) {
        optionals.set(4);
      }
      if (struct.isSetExtraInfos()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetPartner()) {
        oprot.writeString(struct.partner);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetFgNotifyUrl()) {
        oprot.writeString(struct.fgNotifyUrl);
      }
      if (struct.isSetMobileNo()) {
        oprot.writeString(struct.mobileNo);
      }
      if (struct.isSetIsMobilePay()) {
        oprot.writeBool(struct.isMobilePay);
      }
      if (struct.isSetExtraInfos()) {
        {
          oprot.writeI32(struct.extraInfos.size());
          for (Map.Entry<String, String> _iter5 : struct.extraInfos.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaySignRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.orderNum = iprot.readString();
      struct.setOrderNumIsSet(true);
      struct.amount = iprot.readI64();
      struct.setAmountIsSet(true);
      struct.bgNotifyUrl = iprot.readString();
      struct.setBgNotifyUrlIsSet(true);
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.partner = iprot.readString();
        struct.setPartnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.fgNotifyUrl = iprot.readString();
        struct.setFgNotifyUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mobileNo = iprot.readString();
        struct.setMobileNoIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isMobilePay = iprot.readBool();
        struct.setIsMobilePayIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraInfos = new HashMap<String,String>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            String _key8; // required
            String _val9; // required
            _key8 = iprot.readString();
            _val9 = iprot.readString();
            struct.extraInfos.put(_key8, _val9);
          }
        }
        struct.setExtraInfosIsSet(true);
      }
    }
  }

}

