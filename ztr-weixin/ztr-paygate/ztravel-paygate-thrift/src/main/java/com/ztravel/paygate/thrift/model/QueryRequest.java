/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ztravel.paygate.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 交易查询请求
 */
public class QueryRequest implements org.apache.thrift.TBase<QueryRequest, QueryRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryRequest");

  private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TRACE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("traceNum", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryRequestTupleSchemeFactory());
  }

  /**
   * partner
   */
  public String partner; // optional
  /**
   * 支付订单号
   */
  public String orderNum; // required
  /**
   * 交易流水号
   */
  public String traceNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * partner
     */
    PARTNER((short)1, "partner"),
    /**
     * 支付订单号
     */
    ORDER_NUM((short)2, "orderNum"),
    /**
     * 交易流水号
     */
    TRACE_NUM((short)3, "traceNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER
          return PARTNER;
        case 2: // ORDER_NUM
          return ORDER_NUM;
        case 3: // TRACE_NUM
          return TRACE_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PARTNER,_Fields.TRACE_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_NUM, new org.apache.thrift.meta_data.FieldMetaData("traceNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryRequest.class, metaDataMap);
  }

  public QueryRequest() {
  }

  public QueryRequest(
    String orderNum)
  {
    this();
    this.orderNum = orderNum;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryRequest(QueryRequest other) {
    if (other.isSetPartner()) {
      this.partner = other.partner;
    }
    if (other.isSetOrderNum()) {
      this.orderNum = other.orderNum;
    }
    if (other.isSetTraceNum()) {
      this.traceNum = other.traceNum;
    }
  }

  public QueryRequest deepCopy() {
    return new QueryRequest(this);
  }

  @Override
  public void clear() {
    this.partner = null;
    this.orderNum = null;
    this.traceNum = null;
  }

  /**
   * partner
   */
  public String getPartner() {
    return this.partner;
  }

  /**
   * partner
   */
  public QueryRequest setPartner(String partner) {
    this.partner = partner;
    return this;
  }

  public void unsetPartner() {
    this.partner = null;
  }

  /** Returns true if field partner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartner() {
    return this.partner != null;
  }

  public void setPartnerIsSet(boolean value) {
    if (!value) {
      this.partner = null;
    }
  }

  /**
   * 支付订单号
   */
  public String getOrderNum() {
    return this.orderNum;
  }

  /**
   * 支付订单号
   */
  public QueryRequest setOrderNum(String orderNum) {
    this.orderNum = orderNum;
    return this;
  }

  public void unsetOrderNum() {
    this.orderNum = null;
  }

  /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNum() {
    return this.orderNum != null;
  }

  public void setOrderNumIsSet(boolean value) {
    if (!value) {
      this.orderNum = null;
    }
  }

  /**
   * 交易流水号
   */
  public String getTraceNum() {
    return this.traceNum;
  }

  /**
   * 交易流水号
   */
  public QueryRequest setTraceNum(String traceNum) {
    this.traceNum = traceNum;
    return this;
  }

  public void unsetTraceNum() {
    this.traceNum = null;
  }

  /** Returns true if field traceNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceNum() {
    return this.traceNum != null;
  }

  public void setTraceNumIsSet(boolean value) {
    if (!value) {
      this.traceNum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER:
      if (value == null) {
        unsetPartner();
      } else {
        setPartner((String)value);
      }
      break;

    case ORDER_NUM:
      if (value == null) {
        unsetOrderNum();
      } else {
        setOrderNum((String)value);
      }
      break;

    case TRACE_NUM:
      if (value == null) {
        unsetTraceNum();
      } else {
        setTraceNum((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER:
      return getPartner();

    case ORDER_NUM:
      return getOrderNum();

    case TRACE_NUM:
      return getTraceNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER:
      return isSetPartner();
    case ORDER_NUM:
      return isSetOrderNum();
    case TRACE_NUM:
      return isSetTraceNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryRequest)
      return this.equals((QueryRequest)that);
    return false;
  }

  public boolean equals(QueryRequest that) {
    if (that == null)
      return false;

    boolean this_present_partner = true && this.isSetPartner();
    boolean that_present_partner = true && that.isSetPartner();
    if (this_present_partner || that_present_partner) {
      if (!(this_present_partner && that_present_partner))
        return false;
      if (!this.partner.equals(that.partner))
        return false;
    }

    boolean this_present_orderNum = true && this.isSetOrderNum();
    boolean that_present_orderNum = true && that.isSetOrderNum();
    if (this_present_orderNum || that_present_orderNum) {
      if (!(this_present_orderNum && that_present_orderNum))
        return false;
      if (!this.orderNum.equals(that.orderNum))
        return false;
    }

    boolean this_present_traceNum = true && this.isSetTraceNum();
    boolean that_present_traceNum = true && that.isSetTraceNum();
    if (this_present_traceNum || that_present_traceNum) {
      if (!(this_present_traceNum && that_present_traceNum))
        return false;
      if (!this.traceNum.equals(that.traceNum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(QueryRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    QueryRequest typedOther = (QueryRequest)other;

    lastComparison = Boolean.valueOf(isSetPartner()).compareTo(typedOther.isSetPartner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, typedOther.partner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNum()).compareTo(typedOther.isSetOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, typedOther.orderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceNum()).compareTo(typedOther.isSetTraceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceNum, typedOther.traceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryRequest(");
    boolean first = true;

    if (isSetPartner()) {
      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("orderNum:");
    if (this.orderNum == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNum);
    }
    first = false;
    if (isSetTraceNum()) {
      if (!first) sb.append(", ");
      sb.append("traceNum:");
      if (this.traceNum == null) {
        sb.append("null");
      } else {
        sb.append(this.traceNum);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderNum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderNum' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryRequestStandardSchemeFactory implements SchemeFactory {
    public QueryRequestStandardScheme getScheme() {
      return new QueryRequestStandardScheme();
    }
  }

  private static class QueryRequestStandardScheme extends StandardScheme<QueryRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partner = iprot.readString();
              struct.setPartnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNum = iprot.readString();
              struct.setOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceNum = iprot.readString();
              struct.setTraceNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partner != null) {
        if (struct.isSetPartner()) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderNum != null) {
        oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
        oprot.writeString(struct.orderNum);
        oprot.writeFieldEnd();
      }
      if (struct.traceNum != null) {
        if (struct.isSetTraceNum()) {
          oprot.writeFieldBegin(TRACE_NUM_FIELD_DESC);
          oprot.writeString(struct.traceNum);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryRequestTupleSchemeFactory implements SchemeFactory {
    public QueryRequestTupleScheme getScheme() {
      return new QueryRequestTupleScheme();
    }
  }

  private static class QueryRequestTupleScheme extends TupleScheme<QueryRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.orderNum);
      BitSet optionals = new BitSet();
      if (struct.isSetPartner()) {
        optionals.set(0);
      }
      if (struct.isSetTraceNum()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPartner()) {
        oprot.writeString(struct.partner);
      }
      if (struct.isSetTraceNum()) {
        oprot.writeString(struct.traceNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.orderNum = iprot.readString();
      struct.setOrderNumIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.partner = iprot.readString();
        struct.setPartnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.traceNum = iprot.readString();
        struct.setTraceNumIsSet(true);
      }
    }
  }

}

