/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ztravel.paygate.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 退款验签结果
 */
public class RefundValSignResponse implements org.apache.thrift.TBase<RefundValSignResponse, RefundValSignResponse._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundValSignResponse");

  private static final org.apache.thrift.protocol.TField RET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("retCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REFUND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("refundNum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RET_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("retMsg", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REFUND_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundAmount", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundValSignResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundValSignResponseTupleSchemeFactory());
  }

  /**
   * 返回码, 0000 代表验证成功
   */
  public String retCode; // required
  /**
   * 退款标识
   */
  public String refundNum; // optional
  /**
   * 返回信息，是对返回码的详细描述
   */
  public String retMsg; // optional
  /**
   * 扣款金额。返回码为0000时，该字段不能为空
   */
  public long refundAmount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 返回码, 0000 代表验证成功
     */
    RET_CODE((short)1, "retCode"),
    /**
     * 退款标识
     */
    REFUND_NUM((short)2, "refundNum"),
    /**
     * 返回信息，是对返回码的详细描述
     */
    RET_MSG((short)3, "retMsg"),
    /**
     * 扣款金额。返回码为0000时，该字段不能为空
     */
    REFUND_AMOUNT((short)4, "refundAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RET_CODE
          return RET_CODE;
        case 2: // REFUND_NUM
          return REFUND_NUM;
        case 3: // RET_MSG
          return RET_MSG;
        case 4: // REFUND_AMOUNT
          return REFUND_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REFUNDAMOUNT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.REFUND_NUM,_Fields.RET_MSG,_Fields.REFUND_AMOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RET_CODE, new org.apache.thrift.meta_data.FieldMetaData("retCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_NUM, new org.apache.thrift.meta_data.FieldMetaData("refundNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RET_MSG, new org.apache.thrift.meta_data.FieldMetaData("retMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundValSignResponse.class, metaDataMap);
  }

  public RefundValSignResponse() {
  }

  public RefundValSignResponse(
    String retCode)
  {
    this();
    this.retCode = retCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundValSignResponse(RefundValSignResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRetCode()) {
      this.retCode = other.retCode;
    }
    if (other.isSetRefundNum()) {
      this.refundNum = other.refundNum;
    }
    if (other.isSetRetMsg()) {
      this.retMsg = other.retMsg;
    }
    this.refundAmount = other.refundAmount;
  }

  public RefundValSignResponse deepCopy() {
    return new RefundValSignResponse(this);
  }

  @Override
  public void clear() {
    this.retCode = null;
    this.refundNum = null;
    this.retMsg = null;
    setRefundAmountIsSet(false);
    this.refundAmount = 0;
  }

  /**
   * 返回码, 0000 代表验证成功
   */
  public String getRetCode() {
    return this.retCode;
  }

  /**
   * 返回码, 0000 代表验证成功
   */
  public RefundValSignResponse setRetCode(String retCode) {
    this.retCode = retCode;
    return this;
  }

  public void unsetRetCode() {
    this.retCode = null;
  }

  /** Returns true if field retCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRetCode() {
    return this.retCode != null;
  }

  public void setRetCodeIsSet(boolean value) {
    if (!value) {
      this.retCode = null;
    }
  }

  /**
   * 退款标识
   */
  public String getRefundNum() {
    return this.refundNum;
  }

  /**
   * 退款标识
   */
  public RefundValSignResponse setRefundNum(String refundNum) {
    this.refundNum = refundNum;
    return this;
  }

  public void unsetRefundNum() {
    this.refundNum = null;
  }

  /** Returns true if field refundNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundNum() {
    return this.refundNum != null;
  }

  public void setRefundNumIsSet(boolean value) {
    if (!value) {
      this.refundNum = null;
    }
  }

  /**
   * 返回信息，是对返回码的详细描述
   */
  public String getRetMsg() {
    return this.retMsg;
  }

  /**
   * 返回信息，是对返回码的详细描述
   */
  public RefundValSignResponse setRetMsg(String retMsg) {
    this.retMsg = retMsg;
    return this;
  }

  public void unsetRetMsg() {
    this.retMsg = null;
  }

  /** Returns true if field retMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetRetMsg() {
    return this.retMsg != null;
  }

  public void setRetMsgIsSet(boolean value) {
    if (!value) {
      this.retMsg = null;
    }
  }

  /**
   * 扣款金额。返回码为0000时，该字段不能为空
   */
  public long getRefundAmount() {
    return this.refundAmount;
  }

  /**
   * 扣款金额。返回码为0000时，该字段不能为空
   */
  public RefundValSignResponse setRefundAmount(long refundAmount) {
    this.refundAmount = refundAmount;
    setRefundAmountIsSet(true);
    return this;
  }

  public void unsetRefundAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  public void setRefundAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RET_CODE:
      if (value == null) {
        unsetRetCode();
      } else {
        setRetCode((String)value);
      }
      break;

    case REFUND_NUM:
      if (value == null) {
        unsetRefundNum();
      } else {
        setRefundNum((String)value);
      }
      break;

    case RET_MSG:
      if (value == null) {
        unsetRetMsg();
      } else {
        setRetMsg((String)value);
      }
      break;

    case REFUND_AMOUNT:
      if (value == null) {
        unsetRefundAmount();
      } else {
        setRefundAmount((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RET_CODE:
      return getRetCode();

    case REFUND_NUM:
      return getRefundNum();

    case RET_MSG:
      return getRetMsg();

    case REFUND_AMOUNT:
      return Long.valueOf(getRefundAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RET_CODE:
      return isSetRetCode();
    case REFUND_NUM:
      return isSetRefundNum();
    case RET_MSG:
      return isSetRetMsg();
    case REFUND_AMOUNT:
      return isSetRefundAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundValSignResponse)
      return this.equals((RefundValSignResponse)that);
    return false;
  }

  public boolean equals(RefundValSignResponse that) {
    if (that == null)
      return false;

    boolean this_present_retCode = true && this.isSetRetCode();
    boolean that_present_retCode = true && that.isSetRetCode();
    if (this_present_retCode || that_present_retCode) {
      if (!(this_present_retCode && that_present_retCode))
        return false;
      if (!this.retCode.equals(that.retCode))
        return false;
    }

    boolean this_present_refundNum = true && this.isSetRefundNum();
    boolean that_present_refundNum = true && that.isSetRefundNum();
    if (this_present_refundNum || that_present_refundNum) {
      if (!(this_present_refundNum && that_present_refundNum))
        return false;
      if (!this.refundNum.equals(that.refundNum))
        return false;
    }

    boolean this_present_retMsg = true && this.isSetRetMsg();
    boolean that_present_retMsg = true && that.isSetRetMsg();
    if (this_present_retMsg || that_present_retMsg) {
      if (!(this_present_retMsg && that_present_retMsg))
        return false;
      if (!this.retMsg.equals(that.retMsg))
        return false;
    }

    boolean this_present_refundAmount = true && this.isSetRefundAmount();
    boolean that_present_refundAmount = true && that.isSetRefundAmount();
    if (this_present_refundAmount || that_present_refundAmount) {
      if (!(this_present_refundAmount && that_present_refundAmount))
        return false;
      if (this.refundAmount != that.refundAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RefundValSignResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RefundValSignResponse typedOther = (RefundValSignResponse)other;

    lastComparison = Boolean.valueOf(isSetRetCode()).compareTo(typedOther.isSetRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retCode, typedOther.retCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundNum()).compareTo(typedOther.isSetRefundNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundNum, typedOther.refundNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetMsg()).compareTo(typedOther.isSetRetMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retMsg, typedOther.retMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundAmount()).compareTo(typedOther.isSetRefundAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundAmount, typedOther.refundAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundValSignResponse(");
    boolean first = true;

    sb.append("retCode:");
    if (this.retCode == null) {
      sb.append("null");
    } else {
      sb.append(this.retCode);
    }
    first = false;
    if (isSetRefundNum()) {
      if (!first) sb.append(", ");
      sb.append("refundNum:");
      if (this.refundNum == null) {
        sb.append("null");
      } else {
        sb.append(this.refundNum);
      }
      first = false;
    }
    if (isSetRetMsg()) {
      if (!first) sb.append(", ");
      sb.append("retMsg:");
      if (this.retMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.retMsg);
      }
      first = false;
    }
    if (isSetRefundAmount()) {
      if (!first) sb.append(", ");
      sb.append("refundAmount:");
      sb.append(this.refundAmount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (retCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'retCode' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundValSignResponseStandardSchemeFactory implements SchemeFactory {
    public RefundValSignResponseStandardScheme getScheme() {
      return new RefundValSignResponseStandardScheme();
    }
  }

  private static class RefundValSignResponseStandardScheme extends StandardScheme<RefundValSignResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundValSignResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RET_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retCode = iprot.readString();
              struct.setRetCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REFUND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundNum = iprot.readString();
              struct.setRefundNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RET_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.retMsg = iprot.readString();
              struct.setRetMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REFUND_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundAmount = iprot.readI64();
              struct.setRefundAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundValSignResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.retCode != null) {
        oprot.writeFieldBegin(RET_CODE_FIELD_DESC);
        oprot.writeString(struct.retCode);
        oprot.writeFieldEnd();
      }
      if (struct.refundNum != null) {
        if (struct.isSetRefundNum()) {
          oprot.writeFieldBegin(REFUND_NUM_FIELD_DESC);
          oprot.writeString(struct.refundNum);
          oprot.writeFieldEnd();
        }
      }
      if (struct.retMsg != null) {
        if (struct.isSetRetMsg()) {
          oprot.writeFieldBegin(RET_MSG_FIELD_DESC);
          oprot.writeString(struct.retMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRefundAmount()) {
        oprot.writeFieldBegin(REFUND_AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.refundAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundValSignResponseTupleSchemeFactory implements SchemeFactory {
    public RefundValSignResponseTupleScheme getScheme() {
      return new RefundValSignResponseTupleScheme();
    }
  }

  private static class RefundValSignResponseTupleScheme extends TupleScheme<RefundValSignResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundValSignResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.retCode);
      BitSet optionals = new BitSet();
      if (struct.isSetRefundNum()) {
        optionals.set(0);
      }
      if (struct.isSetRetMsg()) {
        optionals.set(1);
      }
      if (struct.isSetRefundAmount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRefundNum()) {
        oprot.writeString(struct.refundNum);
      }
      if (struct.isSetRetMsg()) {
        oprot.writeString(struct.retMsg);
      }
      if (struct.isSetRefundAmount()) {
        oprot.writeI64(struct.refundAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundValSignResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.retCode = iprot.readString();
      struct.setRetCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.refundNum = iprot.readString();
        struct.setRefundNumIsSet(true);
      }
      if (incoming.get(1)) {
        struct.retMsg = iprot.readString();
        struct.setRetMsgIsSet(true);
      }
      if (incoming.get(2)) {
        struct.refundAmount = iprot.readI64();
        struct.setRefundAmountIsSet(true);
      }
    }
  }

}

