/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ztravel.paygate.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 退款申请
 */
public class RefundRequest implements org.apache.thrift.TBase<RefundRequest, RefundRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RefundRequest");

  private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField REFUND_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("refundNum", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRACE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("traceNum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REFUND_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("refundAmount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TRANS_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("transAmount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField COMMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("comment", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NOTIFY_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REFUND_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("refundTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField REFUND_PROFIT_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("refundProfitDetails", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RefundRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RefundRequestTupleSchemeFactory());
  }

  /**
   * partner
   */
  public String partner; // optional
  /**
   * 退款标识
   */
  public String refundNum; // required
  /**
   * 原支付交易的订单号
   */
  public String orderNum; // required
  /**
   * 原支付交易流水号
   */
  public String traceNum; // required
  /**
   * 本次退款金额
   */
  public long refundAmount; // required
  /**
   * 原始交易金额
   */
  public long transAmount; // required
  /**
   * 备注信息
   */
  public String comment; // optional
  /**
   * 交易结果通知地址
   */
  public String notifyUrl; // optional
  /**
   * 退款时间(yyyy-MM-dd HH:mm:ss)
   */
  public String refundTime; // optional
  /**
   * 退分润信息
   */
  public List<RefundShareProfitModel> refundProfitDetails; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * partner
     */
    PARTNER((short)1, "partner"),
    /**
     * 退款标识
     */
    REFUND_NUM((short)2, "refundNum"),
    /**
     * 原支付交易的订单号
     */
    ORDER_NUM((short)3, "orderNum"),
    /**
     * 原支付交易流水号
     */
    TRACE_NUM((short)4, "traceNum"),
    /**
     * 本次退款金额
     */
    REFUND_AMOUNT((short)5, "refundAmount"),
    /**
     * 原始交易金额
     */
    TRANS_AMOUNT((short)6, "transAmount"),
    /**
     * 备注信息
     */
    COMMENT((short)7, "comment"),
    /**
     * 交易结果通知地址
     */
    NOTIFY_URL((short)8, "notifyUrl"),
    /**
     * 退款时间(yyyy-MM-dd HH:mm:ss)
     */
    REFUND_TIME((short)9, "refundTime"),
    /**
     * 退分润信息
     */
    REFUND_PROFIT_DETAILS((short)10, "refundProfitDetails");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER
          return PARTNER;
        case 2: // REFUND_NUM
          return REFUND_NUM;
        case 3: // ORDER_NUM
          return ORDER_NUM;
        case 4: // TRACE_NUM
          return TRACE_NUM;
        case 5: // REFUND_AMOUNT
          return REFUND_AMOUNT;
        case 6: // TRANS_AMOUNT
          return TRANS_AMOUNT;
        case 7: // COMMENT
          return COMMENT;
        case 8: // NOTIFY_URL
          return NOTIFY_URL;
        case 9: // REFUND_TIME
          return REFUND_TIME;
        case 10: // REFUND_PROFIT_DETAILS
          return REFUND_PROFIT_DETAILS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REFUNDAMOUNT_ISSET_ID = 0;
  private static final int __TRANSAMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PARTNER,_Fields.COMMENT,_Fields.NOTIFY_URL,_Fields.REFUND_TIME,_Fields.REFUND_PROFIT_DETAILS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_NUM, new org.apache.thrift.meta_data.FieldMetaData("refundNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRACE_NUM, new org.apache.thrift.meta_data.FieldMetaData("traceNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("refundAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRANS_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("transAmount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMMENT, new org.apache.thrift.meta_data.FieldMetaData("comment", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_URL, new org.apache.thrift.meta_data.FieldMetaData("notifyUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_TIME, new org.apache.thrift.meta_data.FieldMetaData("refundTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REFUND_PROFIT_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("refundProfitDetails", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RefundShareProfitModel.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RefundRequest.class, metaDataMap);
  }

  public RefundRequest() {
  }

  public RefundRequest(
    String refundNum,
    String orderNum,
    String traceNum,
    long refundAmount,
    long transAmount)
  {
    this();
    this.refundNum = refundNum;
    this.orderNum = orderNum;
    this.traceNum = traceNum;
    this.refundAmount = refundAmount;
    setRefundAmountIsSet(true);
    this.transAmount = transAmount;
    setTransAmountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RefundRequest(RefundRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartner()) {
      this.partner = other.partner;
    }
    if (other.isSetRefundNum()) {
      this.refundNum = other.refundNum;
    }
    if (other.isSetOrderNum()) {
      this.orderNum = other.orderNum;
    }
    if (other.isSetTraceNum()) {
      this.traceNum = other.traceNum;
    }
    this.refundAmount = other.refundAmount;
    this.transAmount = other.transAmount;
    if (other.isSetComment()) {
      this.comment = other.comment;
    }
    if (other.isSetNotifyUrl()) {
      this.notifyUrl = other.notifyUrl;
    }
    if (other.isSetRefundTime()) {
      this.refundTime = other.refundTime;
    }
    if (other.isSetRefundProfitDetails()) {
      List<RefundShareProfitModel> __this__refundProfitDetails = new ArrayList<RefundShareProfitModel>();
      for (RefundShareProfitModel other_element : other.refundProfitDetails) {
        __this__refundProfitDetails.add(new RefundShareProfitModel(other_element));
      }
      this.refundProfitDetails = __this__refundProfitDetails;
    }
  }

  public RefundRequest deepCopy() {
    return new RefundRequest(this);
  }

  @Override
  public void clear() {
    this.partner = null;
    this.refundNum = null;
    this.orderNum = null;
    this.traceNum = null;
    setRefundAmountIsSet(false);
    this.refundAmount = 0;
    setTransAmountIsSet(false);
    this.transAmount = 0;
    this.comment = null;
    this.notifyUrl = null;
    this.refundTime = null;
    this.refundProfitDetails = null;
  }

  /**
   * partner
   */
  public String getPartner() {
    return this.partner;
  }

  /**
   * partner
   */
  public RefundRequest setPartner(String partner) {
    this.partner = partner;
    return this;
  }

  public void unsetPartner() {
    this.partner = null;
  }

  /** Returns true if field partner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartner() {
    return this.partner != null;
  }

  public void setPartnerIsSet(boolean value) {
    if (!value) {
      this.partner = null;
    }
  }

  /**
   * 退款标识
   */
  public String getRefundNum() {
    return this.refundNum;
  }

  /**
   * 退款标识
   */
  public RefundRequest setRefundNum(String refundNum) {
    this.refundNum = refundNum;
    return this;
  }

  public void unsetRefundNum() {
    this.refundNum = null;
  }

  /** Returns true if field refundNum is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundNum() {
    return this.refundNum != null;
  }

  public void setRefundNumIsSet(boolean value) {
    if (!value) {
      this.refundNum = null;
    }
  }

  /**
   * 原支付交易的订单号
   */
  public String getOrderNum() {
    return this.orderNum;
  }

  /**
   * 原支付交易的订单号
   */
  public RefundRequest setOrderNum(String orderNum) {
    this.orderNum = orderNum;
    return this;
  }

  public void unsetOrderNum() {
    this.orderNum = null;
  }

  /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNum() {
    return this.orderNum != null;
  }

  public void setOrderNumIsSet(boolean value) {
    if (!value) {
      this.orderNum = null;
    }
  }

  /**
   * 原支付交易流水号
   */
  public String getTraceNum() {
    return this.traceNum;
  }

  /**
   * 原支付交易流水号
   */
  public RefundRequest setTraceNum(String traceNum) {
    this.traceNum = traceNum;
    return this;
  }

  public void unsetTraceNum() {
    this.traceNum = null;
  }

  /** Returns true if field traceNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceNum() {
    return this.traceNum != null;
  }

  public void setTraceNumIsSet(boolean value) {
    if (!value) {
      this.traceNum = null;
    }
  }

  /**
   * 本次退款金额
   */
  public long getRefundAmount() {
    return this.refundAmount;
  }

  /**
   * 本次退款金额
   */
  public RefundRequest setRefundAmount(long refundAmount) {
    this.refundAmount = refundAmount;
    setRefundAmountIsSet(true);
    return this;
  }

  public void unsetRefundAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  /** Returns true if field refundAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID);
  }

  public void setRefundAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REFUNDAMOUNT_ISSET_ID, value);
  }

  /**
   * 原始交易金额
   */
  public long getTransAmount() {
    return this.transAmount;
  }

  /**
   * 原始交易金额
   */
  public RefundRequest setTransAmount(long transAmount) {
    this.transAmount = transAmount;
    setTransAmountIsSet(true);
    return this;
  }

  public void unsetTransAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRANSAMOUNT_ISSET_ID);
  }

  /** Returns true if field transAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTransAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRANSAMOUNT_ISSET_ID);
  }

  public void setTransAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRANSAMOUNT_ISSET_ID, value);
  }

  /**
   * 备注信息
   */
  public String getComment() {
    return this.comment;
  }

  /**
   * 备注信息
   */
  public RefundRequest setComment(String comment) {
    this.comment = comment;
    return this;
  }

  public void unsetComment() {
    this.comment = null;
  }

  /** Returns true if field comment is set (has been assigned a value) and false otherwise */
  public boolean isSetComment() {
    return this.comment != null;
  }

  public void setCommentIsSet(boolean value) {
    if (!value) {
      this.comment = null;
    }
  }

  /**
   * 交易结果通知地址
   */
  public String getNotifyUrl() {
    return this.notifyUrl;
  }

  /**
   * 交易结果通知地址
   */
  public RefundRequest setNotifyUrl(String notifyUrl) {
    this.notifyUrl = notifyUrl;
    return this;
  }

  public void unsetNotifyUrl() {
    this.notifyUrl = null;
  }

  /** Returns true if field notifyUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyUrl() {
    return this.notifyUrl != null;
  }

  public void setNotifyUrlIsSet(boolean value) {
    if (!value) {
      this.notifyUrl = null;
    }
  }

  /**
   * 退款时间(yyyy-MM-dd HH:mm:ss)
   */
  public String getRefundTime() {
    return this.refundTime;
  }

  /**
   * 退款时间(yyyy-MM-dd HH:mm:ss)
   */
  public RefundRequest setRefundTime(String refundTime) {
    this.refundTime = refundTime;
    return this;
  }

  public void unsetRefundTime() {
    this.refundTime = null;
  }

  /** Returns true if field refundTime is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundTime() {
    return this.refundTime != null;
  }

  public void setRefundTimeIsSet(boolean value) {
    if (!value) {
      this.refundTime = null;
    }
  }

  public int getRefundProfitDetailsSize() {
    return (this.refundProfitDetails == null) ? 0 : this.refundProfitDetails.size();
  }

  public java.util.Iterator<RefundShareProfitModel> getRefundProfitDetailsIterator() {
    return (this.refundProfitDetails == null) ? null : this.refundProfitDetails.iterator();
  }

  public void addToRefundProfitDetails(RefundShareProfitModel elem) {
    if (this.refundProfitDetails == null) {
      this.refundProfitDetails = new ArrayList<RefundShareProfitModel>();
    }
    this.refundProfitDetails.add(elem);
  }

  /**
   * 退分润信息
   */
  public List<RefundShareProfitModel> getRefundProfitDetails() {
    return this.refundProfitDetails;
  }

  /**
   * 退分润信息
   */
  public RefundRequest setRefundProfitDetails(List<RefundShareProfitModel> refundProfitDetails) {
    this.refundProfitDetails = refundProfitDetails;
    return this;
  }

  public void unsetRefundProfitDetails() {
    this.refundProfitDetails = null;
  }

  /** Returns true if field refundProfitDetails is set (has been assigned a value) and false otherwise */
  public boolean isSetRefundProfitDetails() {
    return this.refundProfitDetails != null;
  }

  public void setRefundProfitDetailsIsSet(boolean value) {
    if (!value) {
      this.refundProfitDetails = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER:
      if (value == null) {
        unsetPartner();
      } else {
        setPartner((String)value);
      }
      break;

    case REFUND_NUM:
      if (value == null) {
        unsetRefundNum();
      } else {
        setRefundNum((String)value);
      }
      break;

    case ORDER_NUM:
      if (value == null) {
        unsetOrderNum();
      } else {
        setOrderNum((String)value);
      }
      break;

    case TRACE_NUM:
      if (value == null) {
        unsetTraceNum();
      } else {
        setTraceNum((String)value);
      }
      break;

    case REFUND_AMOUNT:
      if (value == null) {
        unsetRefundAmount();
      } else {
        setRefundAmount((Long)value);
      }
      break;

    case TRANS_AMOUNT:
      if (value == null) {
        unsetTransAmount();
      } else {
        setTransAmount((Long)value);
      }
      break;

    case COMMENT:
      if (value == null) {
        unsetComment();
      } else {
        setComment((String)value);
      }
      break;

    case NOTIFY_URL:
      if (value == null) {
        unsetNotifyUrl();
      } else {
        setNotifyUrl((String)value);
      }
      break;

    case REFUND_TIME:
      if (value == null) {
        unsetRefundTime();
      } else {
        setRefundTime((String)value);
      }
      break;

    case REFUND_PROFIT_DETAILS:
      if (value == null) {
        unsetRefundProfitDetails();
      } else {
        setRefundProfitDetails((List<RefundShareProfitModel>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER:
      return getPartner();

    case REFUND_NUM:
      return getRefundNum();

    case ORDER_NUM:
      return getOrderNum();

    case TRACE_NUM:
      return getTraceNum();

    case REFUND_AMOUNT:
      return Long.valueOf(getRefundAmount());

    case TRANS_AMOUNT:
      return Long.valueOf(getTransAmount());

    case COMMENT:
      return getComment();

    case NOTIFY_URL:
      return getNotifyUrl();

    case REFUND_TIME:
      return getRefundTime();

    case REFUND_PROFIT_DETAILS:
      return getRefundProfitDetails();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER:
      return isSetPartner();
    case REFUND_NUM:
      return isSetRefundNum();
    case ORDER_NUM:
      return isSetOrderNum();
    case TRACE_NUM:
      return isSetTraceNum();
    case REFUND_AMOUNT:
      return isSetRefundAmount();
    case TRANS_AMOUNT:
      return isSetTransAmount();
    case COMMENT:
      return isSetComment();
    case NOTIFY_URL:
      return isSetNotifyUrl();
    case REFUND_TIME:
      return isSetRefundTime();
    case REFUND_PROFIT_DETAILS:
      return isSetRefundProfitDetails();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RefundRequest)
      return this.equals((RefundRequest)that);
    return false;
  }

  public boolean equals(RefundRequest that) {
    if (that == null)
      return false;

    boolean this_present_partner = true && this.isSetPartner();
    boolean that_present_partner = true && that.isSetPartner();
    if (this_present_partner || that_present_partner) {
      if (!(this_present_partner && that_present_partner))
        return false;
      if (!this.partner.equals(that.partner))
        return false;
    }

    boolean this_present_refundNum = true && this.isSetRefundNum();
    boolean that_present_refundNum = true && that.isSetRefundNum();
    if (this_present_refundNum || that_present_refundNum) {
      if (!(this_present_refundNum && that_present_refundNum))
        return false;
      if (!this.refundNum.equals(that.refundNum))
        return false;
    }

    boolean this_present_orderNum = true && this.isSetOrderNum();
    boolean that_present_orderNum = true && that.isSetOrderNum();
    if (this_present_orderNum || that_present_orderNum) {
      if (!(this_present_orderNum && that_present_orderNum))
        return false;
      if (!this.orderNum.equals(that.orderNum))
        return false;
    }

    boolean this_present_traceNum = true && this.isSetTraceNum();
    boolean that_present_traceNum = true && that.isSetTraceNum();
    if (this_present_traceNum || that_present_traceNum) {
      if (!(this_present_traceNum && that_present_traceNum))
        return false;
      if (!this.traceNum.equals(that.traceNum))
        return false;
    }

    boolean this_present_refundAmount = true;
    boolean that_present_refundAmount = true;
    if (this_present_refundAmount || that_present_refundAmount) {
      if (!(this_present_refundAmount && that_present_refundAmount))
        return false;
      if (this.refundAmount != that.refundAmount)
        return false;
    }

    boolean this_present_transAmount = true;
    boolean that_present_transAmount = true;
    if (this_present_transAmount || that_present_transAmount) {
      if (!(this_present_transAmount && that_present_transAmount))
        return false;
      if (this.transAmount != that.transAmount)
        return false;
    }

    boolean this_present_comment = true && this.isSetComment();
    boolean that_present_comment = true && that.isSetComment();
    if (this_present_comment || that_present_comment) {
      if (!(this_present_comment && that_present_comment))
        return false;
      if (!this.comment.equals(that.comment))
        return false;
    }

    boolean this_present_notifyUrl = true && this.isSetNotifyUrl();
    boolean that_present_notifyUrl = true && that.isSetNotifyUrl();
    if (this_present_notifyUrl || that_present_notifyUrl) {
      if (!(this_present_notifyUrl && that_present_notifyUrl))
        return false;
      if (!this.notifyUrl.equals(that.notifyUrl))
        return false;
    }

    boolean this_present_refundTime = true && this.isSetRefundTime();
    boolean that_present_refundTime = true && that.isSetRefundTime();
    if (this_present_refundTime || that_present_refundTime) {
      if (!(this_present_refundTime && that_present_refundTime))
        return false;
      if (!this.refundTime.equals(that.refundTime))
        return false;
    }

    boolean this_present_refundProfitDetails = true && this.isSetRefundProfitDetails();
    boolean that_present_refundProfitDetails = true && that.isSetRefundProfitDetails();
    if (this_present_refundProfitDetails || that_present_refundProfitDetails) {
      if (!(this_present_refundProfitDetails && that_present_refundProfitDetails))
        return false;
      if (!this.refundProfitDetails.equals(that.refundProfitDetails))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RefundRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RefundRequest typedOther = (RefundRequest)other;

    lastComparison = Boolean.valueOf(isSetPartner()).compareTo(typedOther.isSetPartner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, typedOther.partner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundNum()).compareTo(typedOther.isSetRefundNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundNum, typedOther.refundNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNum()).compareTo(typedOther.isSetOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, typedOther.orderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceNum()).compareTo(typedOther.isSetTraceNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceNum, typedOther.traceNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundAmount()).compareTo(typedOther.isSetRefundAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundAmount, typedOther.refundAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransAmount()).compareTo(typedOther.isSetTransAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transAmount, typedOther.transAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComment()).compareTo(typedOther.isSetComment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.comment, typedOther.comment);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyUrl()).compareTo(typedOther.isSetNotifyUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyUrl, typedOther.notifyUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundTime()).compareTo(typedOther.isSetRefundTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundTime, typedOther.refundTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRefundProfitDetails()).compareTo(typedOther.isSetRefundProfitDetails());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefundProfitDetails()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundProfitDetails, typedOther.refundProfitDetails);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RefundRequest(");
    boolean first = true;

    if (isSetPartner()) {
      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("refundNum:");
    if (this.refundNum == null) {
      sb.append("null");
    } else {
      sb.append(this.refundNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderNum:");
    if (this.orderNum == null) {
      sb.append("null");
    } else {
      sb.append(this.orderNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceNum:");
    if (this.traceNum == null) {
      sb.append("null");
    } else {
      sb.append(this.traceNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("refundAmount:");
    sb.append(this.refundAmount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transAmount:");
    sb.append(this.transAmount);
    first = false;
    if (isSetComment()) {
      if (!first) sb.append(", ");
      sb.append("comment:");
      if (this.comment == null) {
        sb.append("null");
      } else {
        sb.append(this.comment);
      }
      first = false;
    }
    if (isSetNotifyUrl()) {
      if (!first) sb.append(", ");
      sb.append("notifyUrl:");
      if (this.notifyUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.notifyUrl);
      }
      first = false;
    }
    if (isSetRefundTime()) {
      if (!first) sb.append(", ");
      sb.append("refundTime:");
      if (this.refundTime == null) {
        sb.append("null");
      } else {
        sb.append(this.refundTime);
      }
      first = false;
    }
    if (isSetRefundProfitDetails()) {
      if (!first) sb.append(", ");
      sb.append("refundProfitDetails:");
      if (this.refundProfitDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.refundProfitDetails);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (refundNum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'refundNum' was not present! Struct: " + toString());
    }
    if (orderNum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderNum' was not present! Struct: " + toString());
    }
    if (traceNum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'traceNum' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'refundAmount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'transAmount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RefundRequestStandardSchemeFactory implements SchemeFactory {
    public RefundRequestStandardScheme getScheme() {
      return new RefundRequestStandardScheme();
    }
  }

  private static class RefundRequestStandardScheme extends StandardScheme<RefundRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RefundRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partner = iprot.readString();
              struct.setPartnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REFUND_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundNum = iprot.readString();
              struct.setRefundNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderNum = iprot.readString();
              struct.setOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRACE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.traceNum = iprot.readString();
              struct.setTraceNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REFUND_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.refundAmount = iprot.readI64();
              struct.setRefundAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRANS_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.transAmount = iprot.readI64();
              struct.setTransAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.comment = iprot.readString();
              struct.setCommentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NOTIFY_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyUrl = iprot.readString();
              struct.setNotifyUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REFUND_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.refundTime = iprot.readString();
              struct.setRefundTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // REFUND_PROFIT_DETAILS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.refundProfitDetails = new ArrayList<RefundShareProfitModel>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  RefundShareProfitModel _elem42; // required
                  _elem42 = new RefundShareProfitModel();
                  _elem42.read(iprot);
                  struct.refundProfitDetails.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setRefundProfitDetailsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetRefundAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'refundAmount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTransAmount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'transAmount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RefundRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partner != null) {
        if (struct.isSetPartner()) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refundNum != null) {
        oprot.writeFieldBegin(REFUND_NUM_FIELD_DESC);
        oprot.writeString(struct.refundNum);
        oprot.writeFieldEnd();
      }
      if (struct.orderNum != null) {
        oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
        oprot.writeString(struct.orderNum);
        oprot.writeFieldEnd();
      }
      if (struct.traceNum != null) {
        oprot.writeFieldBegin(TRACE_NUM_FIELD_DESC);
        oprot.writeString(struct.traceNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REFUND_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.refundAmount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRANS_AMOUNT_FIELD_DESC);
      oprot.writeI64(struct.transAmount);
      oprot.writeFieldEnd();
      if (struct.comment != null) {
        if (struct.isSetComment()) {
          oprot.writeFieldBegin(COMMENT_FIELD_DESC);
          oprot.writeString(struct.comment);
          oprot.writeFieldEnd();
        }
      }
      if (struct.notifyUrl != null) {
        if (struct.isSetNotifyUrl()) {
          oprot.writeFieldBegin(NOTIFY_URL_FIELD_DESC);
          oprot.writeString(struct.notifyUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refundTime != null) {
        if (struct.isSetRefundTime()) {
          oprot.writeFieldBegin(REFUND_TIME_FIELD_DESC);
          oprot.writeString(struct.refundTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.refundProfitDetails != null) {
        if (struct.isSetRefundProfitDetails()) {
          oprot.writeFieldBegin(REFUND_PROFIT_DETAILS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.refundProfitDetails.size()));
            for (RefundShareProfitModel _iter43 : struct.refundProfitDetails)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RefundRequestTupleSchemeFactory implements SchemeFactory {
    public RefundRequestTupleScheme getScheme() {
      return new RefundRequestTupleScheme();
    }
  }

  private static class RefundRequestTupleScheme extends TupleScheme<RefundRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RefundRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.refundNum);
      oprot.writeString(struct.orderNum);
      oprot.writeString(struct.traceNum);
      oprot.writeI64(struct.refundAmount);
      oprot.writeI64(struct.transAmount);
      BitSet optionals = new BitSet();
      if (struct.isSetPartner()) {
        optionals.set(0);
      }
      if (struct.isSetComment()) {
        optionals.set(1);
      }
      if (struct.isSetNotifyUrl()) {
        optionals.set(2);
      }
      if (struct.isSetRefundTime()) {
        optionals.set(3);
      }
      if (struct.isSetRefundProfitDetails()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetPartner()) {
        oprot.writeString(struct.partner);
      }
      if (struct.isSetComment()) {
        oprot.writeString(struct.comment);
      }
      if (struct.isSetNotifyUrl()) {
        oprot.writeString(struct.notifyUrl);
      }
      if (struct.isSetRefundTime()) {
        oprot.writeString(struct.refundTime);
      }
      if (struct.isSetRefundProfitDetails()) {
        {
          oprot.writeI32(struct.refundProfitDetails.size());
          for (RefundShareProfitModel _iter44 : struct.refundProfitDetails)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RefundRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.refundNum = iprot.readString();
      struct.setRefundNumIsSet(true);
      struct.orderNum = iprot.readString();
      struct.setOrderNumIsSet(true);
      struct.traceNum = iprot.readString();
      struct.setTraceNumIsSet(true);
      struct.refundAmount = iprot.readI64();
      struct.setRefundAmountIsSet(true);
      struct.transAmount = iprot.readI64();
      struct.setTransAmountIsSet(true);
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.partner = iprot.readString();
        struct.setPartnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.comment = iprot.readString();
        struct.setCommentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notifyUrl = iprot.readString();
        struct.setNotifyUrlIsSet(true);
      }
      if (incoming.get(3)) {
        struct.refundTime = iprot.readString();
        struct.setRefundTimeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.refundProfitDetails = new ArrayList<RefundShareProfitModel>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            RefundShareProfitModel _elem47; // required
            _elem47 = new RefundShareProfitModel();
            _elem47.read(iprot);
            struct.refundProfitDetails.add(_elem47);
          }
        }
        struct.setRefundProfitDetailsIsSet(true);
      }
    }
  }

}

