/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ztravel.paygate.thrift.service;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PaygateService {

  /**
   * 支付网关的thrift服务,目前可以满足汇付天下，财付通，支付宝三种支持方式
   */
  public interface Iface {

    /**
     * 单笔支付订单签名
     * 
     * @param signRequest
     */
    public com.ztravel.paygate.thrift.model.PaySignResponse paySign(com.ztravel.paygate.thrift.model.PaySignRequest signRequest) throws org.apache.thrift.TException;

    /**
     * 单笔支付订单结果验签
     * 
     * @param valSignRequest
     */
    public com.ztravel.paygate.thrift.model.ValSignResponse payValSign(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest) throws org.apache.thrift.TException;

    /**
     * 支付查询
     * 
     * @param queryRequest
     */
    public com.ztravel.paygate.thrift.model.QueryResponse query(com.ztravel.paygate.thrift.model.QueryRequest queryRequest) throws org.apache.thrift.TException;

    /**
     * 订单退款
     * 
     * @param refundRequest
     */
    public com.ztravel.paygate.thrift.model.RefundResponse refund(com.ztravel.paygate.thrift.model.RefundRequest refundRequest) throws org.apache.thrift.TException;

    /**
     * 退单查询
     * 
     * @param refundQueryRequest
     */
    public com.ztravel.paygate.thrift.model.RefundQueryResponse refundQuery(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest) throws org.apache.thrift.TException;

    /**
     * 订单退款结果验签
     * 
     * @param valSignRequest
     */
    public com.ztravel.paygate.thrift.model.RefundValSignResponse refundValSign(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void paySign(com.ztravel.paygate.thrift.model.PaySignRequest signRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.paySign_call> resultHandler) throws org.apache.thrift.TException;

    public void payValSign(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.payValSign_call> resultHandler) throws org.apache.thrift.TException;

    public void query(com.ztravel.paygate.thrift.model.QueryRequest queryRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.query_call> resultHandler) throws org.apache.thrift.TException;

    public void refund(com.ztravel.paygate.thrift.model.RefundRequest refundRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.refund_call> resultHandler) throws org.apache.thrift.TException;

    public void refundQuery(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.refundQuery_call> resultHandler) throws org.apache.thrift.TException;

    public void refundValSign(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.refundValSign_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.ztravel.paygate.thrift.model.PaySignResponse paySign(com.ztravel.paygate.thrift.model.PaySignRequest signRequest) throws org.apache.thrift.TException
    {
      send_paySign(signRequest);
      return recv_paySign();
    }

    public void send_paySign(com.ztravel.paygate.thrift.model.PaySignRequest signRequest) throws org.apache.thrift.TException
    {
      paySign_args args = new paySign_args();
      args.setSignRequest(signRequest);
      sendBase("paySign", args);
    }

    public com.ztravel.paygate.thrift.model.PaySignResponse recv_paySign() throws org.apache.thrift.TException
    {
      paySign_result result = new paySign_result();
      receiveBase(result, "paySign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "paySign failed: unknown result");
    }

    public com.ztravel.paygate.thrift.model.ValSignResponse payValSign(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest) throws org.apache.thrift.TException
    {
      send_payValSign(valSignRequest);
      return recv_payValSign();
    }

    public void send_payValSign(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest) throws org.apache.thrift.TException
    {
      payValSign_args args = new payValSign_args();
      args.setValSignRequest(valSignRequest);
      sendBase("payValSign", args);
    }

    public com.ztravel.paygate.thrift.model.ValSignResponse recv_payValSign() throws org.apache.thrift.TException
    {
      payValSign_result result = new payValSign_result();
      receiveBase(result, "payValSign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "payValSign failed: unknown result");
    }

    public com.ztravel.paygate.thrift.model.QueryResponse query(com.ztravel.paygate.thrift.model.QueryRequest queryRequest) throws org.apache.thrift.TException
    {
      send_query(queryRequest);
      return recv_query();
    }

    public void send_query(com.ztravel.paygate.thrift.model.QueryRequest queryRequest) throws org.apache.thrift.TException
    {
      query_args args = new query_args();
      args.setQueryRequest(queryRequest);
      sendBase("query", args);
    }

    public com.ztravel.paygate.thrift.model.QueryResponse recv_query() throws org.apache.thrift.TException
    {
      query_result result = new query_result();
      receiveBase(result, "query");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "query failed: unknown result");
    }

    public com.ztravel.paygate.thrift.model.RefundResponse refund(com.ztravel.paygate.thrift.model.RefundRequest refundRequest) throws org.apache.thrift.TException
    {
      send_refund(refundRequest);
      return recv_refund();
    }

    public void send_refund(com.ztravel.paygate.thrift.model.RefundRequest refundRequest) throws org.apache.thrift.TException
    {
      refund_args args = new refund_args();
      args.setRefundRequest(refundRequest);
      sendBase("refund", args);
    }

    public com.ztravel.paygate.thrift.model.RefundResponse recv_refund() throws org.apache.thrift.TException
    {
      refund_result result = new refund_result();
      receiveBase(result, "refund");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refund failed: unknown result");
    }

    public com.ztravel.paygate.thrift.model.RefundQueryResponse refundQuery(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest) throws org.apache.thrift.TException
    {
      send_refundQuery(refundQueryRequest);
      return recv_refundQuery();
    }

    public void send_refundQuery(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest) throws org.apache.thrift.TException
    {
      refundQuery_args args = new refundQuery_args();
      args.setRefundQueryRequest(refundQueryRequest);
      sendBase("refundQuery", args);
    }

    public com.ztravel.paygate.thrift.model.RefundQueryResponse recv_refundQuery() throws org.apache.thrift.TException
    {
      refundQuery_result result = new refundQuery_result();
      receiveBase(result, "refundQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refundQuery failed: unknown result");
    }

    public com.ztravel.paygate.thrift.model.RefundValSignResponse refundValSign(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest) throws org.apache.thrift.TException
    {
      send_refundValSign(valSignRequest);
      return recv_refundValSign();
    }

    public void send_refundValSign(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest) throws org.apache.thrift.TException
    {
      refundValSign_args args = new refundValSign_args();
      args.setValSignRequest(valSignRequest);
      sendBase("refundValSign", args);
    }

    public com.ztravel.paygate.thrift.model.RefundValSignResponse recv_refundValSign() throws org.apache.thrift.TException
    {
      refundValSign_result result = new refundValSign_result();
      receiveBase(result, "refundValSign");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refundValSign failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void paySign(com.ztravel.paygate.thrift.model.PaySignRequest signRequest, org.apache.thrift.async.AsyncMethodCallback<paySign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      paySign_call method_call = new paySign_call(signRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class paySign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ztravel.paygate.thrift.model.PaySignRequest signRequest;
      public paySign_call(com.ztravel.paygate.thrift.model.PaySignRequest signRequest, org.apache.thrift.async.AsyncMethodCallback<paySign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.signRequest = signRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("paySign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        paySign_args args = new paySign_args();
        args.setSignRequest(signRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ztravel.paygate.thrift.model.PaySignResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_paySign();
      }
    }

    public void payValSign(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest, org.apache.thrift.async.AsyncMethodCallback<payValSign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      payValSign_call method_call = new payValSign_call(valSignRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class payValSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest;
      public payValSign_call(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest, org.apache.thrift.async.AsyncMethodCallback<payValSign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.valSignRequest = valSignRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("payValSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        payValSign_args args = new payValSign_args();
        args.setValSignRequest(valSignRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ztravel.paygate.thrift.model.ValSignResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_payValSign();
      }
    }

    public void query(com.ztravel.paygate.thrift.model.QueryRequest queryRequest, org.apache.thrift.async.AsyncMethodCallback<query_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      query_call method_call = new query_call(queryRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class query_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ztravel.paygate.thrift.model.QueryRequest queryRequest;
      public query_call(com.ztravel.paygate.thrift.model.QueryRequest queryRequest, org.apache.thrift.async.AsyncMethodCallback<query_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.queryRequest = queryRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        query_args args = new query_args();
        args.setQueryRequest(queryRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ztravel.paygate.thrift.model.QueryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_query();
      }
    }

    public void refund(com.ztravel.paygate.thrift.model.RefundRequest refundRequest, org.apache.thrift.async.AsyncMethodCallback<refund_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refund_call method_call = new refund_call(refundRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refund_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ztravel.paygate.thrift.model.RefundRequest refundRequest;
      public refund_call(com.ztravel.paygate.thrift.model.RefundRequest refundRequest, org.apache.thrift.async.AsyncMethodCallback<refund_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundRequest = refundRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refund", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refund_args args = new refund_args();
        args.setRefundRequest(refundRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ztravel.paygate.thrift.model.RefundResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refund();
      }
    }

    public void refundQuery(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest, org.apache.thrift.async.AsyncMethodCallback<refundQuery_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refundQuery_call method_call = new refundQuery_call(refundQueryRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refundQuery_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest;
      public refundQuery_call(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest, org.apache.thrift.async.AsyncMethodCallback<refundQuery_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.refundQueryRequest = refundQueryRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refundQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refundQuery_args args = new refundQuery_args();
        args.setRefundQueryRequest(refundQueryRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ztravel.paygate.thrift.model.RefundQueryResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refundQuery();
      }
    }

    public void refundValSign(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest, org.apache.thrift.async.AsyncMethodCallback<refundValSign_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refundValSign_call method_call = new refundValSign_call(valSignRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refundValSign_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest;
      public refundValSign_call(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest, org.apache.thrift.async.AsyncMethodCallback<refundValSign_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.valSignRequest = valSignRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refundValSign", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refundValSign_args args = new refundValSign_args();
        args.setValSignRequest(valSignRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.ztravel.paygate.thrift.model.RefundValSignResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refundValSign();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("paySign", new paySign());
      processMap.put("payValSign", new payValSign());
      processMap.put("query", new query());
      processMap.put("refund", new refund());
      processMap.put("refundQuery", new refundQuery());
      processMap.put("refundValSign", new refundValSign());
      return processMap;
    }

    public static class paySign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, paySign_args> {
      public paySign() {
        super("paySign");
      }

      public paySign_args getEmptyArgsInstance() {
        return new paySign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public paySign_result getResult(I iface, paySign_args args) throws org.apache.thrift.TException {
        paySign_result result = new paySign_result();
        result.success = iface.paySign(args.signRequest);
        return result;
      }
    }

    public static class payValSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, payValSign_args> {
      public payValSign() {
        super("payValSign");
      }

      public payValSign_args getEmptyArgsInstance() {
        return new payValSign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public payValSign_result getResult(I iface, payValSign_args args) throws org.apache.thrift.TException {
        payValSign_result result = new payValSign_result();
        result.success = iface.payValSign(args.valSignRequest);
        return result;
      }
    }

    public static class query<I extends Iface> extends org.apache.thrift.ProcessFunction<I, query_args> {
      public query() {
        super("query");
      }

      public query_args getEmptyArgsInstance() {
        return new query_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public query_result getResult(I iface, query_args args) throws org.apache.thrift.TException {
        query_result result = new query_result();
        result.success = iface.query(args.queryRequest);
        return result;
      }
    }

    public static class refund<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refund_args> {
      public refund() {
        super("refund");
      }

      public refund_args getEmptyArgsInstance() {
        return new refund_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refund_result getResult(I iface, refund_args args) throws org.apache.thrift.TException {
        refund_result result = new refund_result();
        result.success = iface.refund(args.refundRequest);
        return result;
      }
    }

    public static class refundQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refundQuery_args> {
      public refundQuery() {
        super("refundQuery");
      }

      public refundQuery_args getEmptyArgsInstance() {
        return new refundQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refundQuery_result getResult(I iface, refundQuery_args args) throws org.apache.thrift.TException {
        refundQuery_result result = new refundQuery_result();
        result.success = iface.refundQuery(args.refundQueryRequest);
        return result;
      }
    }

    public static class refundValSign<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refundValSign_args> {
      public refundValSign() {
        super("refundValSign");
      }

      public refundValSign_args getEmptyArgsInstance() {
        return new refundValSign_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refundValSign_result getResult(I iface, refundValSign_args args) throws org.apache.thrift.TException {
        refundValSign_result result = new refundValSign_result();
        result.success = iface.refundValSign(args.valSignRequest);
        return result;
      }
    }

  }

  public static class paySign_args implements org.apache.thrift.TBase<paySign_args, paySign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("paySign_args");

    private static final org.apache.thrift.protocol.TField SIGN_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("signRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paySign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new paySign_argsTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.PaySignRequest signRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SIGN_REQUEST((short)1, "signRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SIGN_REQUEST
            return SIGN_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SIGN_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("signRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.PaySignRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(paySign_args.class, metaDataMap);
    }

    public paySign_args() {
    }

    public paySign_args(
      com.ztravel.paygate.thrift.model.PaySignRequest signRequest)
    {
      this();
      this.signRequest = signRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paySign_args(paySign_args other) {
      if (other.isSetSignRequest()) {
        this.signRequest = new com.ztravel.paygate.thrift.model.PaySignRequest(other.signRequest);
      }
    }

    public paySign_args deepCopy() {
      return new paySign_args(this);
    }

    @Override
    public void clear() {
      this.signRequest = null;
    }

    public com.ztravel.paygate.thrift.model.PaySignRequest getSignRequest() {
      return this.signRequest;
    }

    public paySign_args setSignRequest(com.ztravel.paygate.thrift.model.PaySignRequest signRequest) {
      this.signRequest = signRequest;
      return this;
    }

    public void unsetSignRequest() {
      this.signRequest = null;
    }

    /** Returns true if field signRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetSignRequest() {
      return this.signRequest != null;
    }

    public void setSignRequestIsSet(boolean value) {
      if (!value) {
        this.signRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SIGN_REQUEST:
        if (value == null) {
          unsetSignRequest();
        } else {
          setSignRequest((com.ztravel.paygate.thrift.model.PaySignRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SIGN_REQUEST:
        return getSignRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SIGN_REQUEST:
        return isSetSignRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paySign_args)
        return this.equals((paySign_args)that);
      return false;
    }

    public boolean equals(paySign_args that) {
      if (that == null)
        return false;

      boolean this_present_signRequest = true && this.isSetSignRequest();
      boolean that_present_signRequest = true && that.isSetSignRequest();
      if (this_present_signRequest || that_present_signRequest) {
        if (!(this_present_signRequest && that_present_signRequest))
          return false;
        if (!this.signRequest.equals(that.signRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(paySign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      paySign_args typedOther = (paySign_args)other;

      lastComparison = Boolean.valueOf(isSetSignRequest()).compareTo(typedOther.isSetSignRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSignRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signRequest, typedOther.signRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paySign_args(");
      boolean first = true;

      sb.append("signRequest:");
      if (this.signRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.signRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (signRequest != null) {
        signRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class paySign_argsStandardSchemeFactory implements SchemeFactory {
      public paySign_argsStandardScheme getScheme() {
        return new paySign_argsStandardScheme();
      }
    }

    private static class paySign_argsStandardScheme extends StandardScheme<paySign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, paySign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SIGN_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.signRequest = new com.ztravel.paygate.thrift.model.PaySignRequest();
                struct.signRequest.read(iprot);
                struct.setSignRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, paySign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.signRequest != null) {
          oprot.writeFieldBegin(SIGN_REQUEST_FIELD_DESC);
          struct.signRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class paySign_argsTupleSchemeFactory implements SchemeFactory {
      public paySign_argsTupleScheme getScheme() {
        return new paySign_argsTupleScheme();
      }
    }

    private static class paySign_argsTupleScheme extends TupleScheme<paySign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, paySign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSignRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSignRequest()) {
          struct.signRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, paySign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.signRequest = new com.ztravel.paygate.thrift.model.PaySignRequest();
          struct.signRequest.read(iprot);
          struct.setSignRequestIsSet(true);
        }
      }
    }

  }

  public static class paySign_result implements org.apache.thrift.TBase<paySign_result, paySign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("paySign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new paySign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new paySign_resultTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.PaySignResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.PaySignResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(paySign_result.class, metaDataMap);
    }

    public paySign_result() {
    }

    public paySign_result(
      com.ztravel.paygate.thrift.model.PaySignResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public paySign_result(paySign_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ztravel.paygate.thrift.model.PaySignResponse(other.success);
      }
    }

    public paySign_result deepCopy() {
      return new paySign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.ztravel.paygate.thrift.model.PaySignResponse getSuccess() {
      return this.success;
    }

    public paySign_result setSuccess(com.ztravel.paygate.thrift.model.PaySignResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ztravel.paygate.thrift.model.PaySignResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof paySign_result)
        return this.equals((paySign_result)that);
      return false;
    }

    public boolean equals(paySign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(paySign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      paySign_result typedOther = (paySign_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("paySign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class paySign_resultStandardSchemeFactory implements SchemeFactory {
      public paySign_resultStandardScheme getScheme() {
        return new paySign_resultStandardScheme();
      }
    }

    private static class paySign_resultStandardScheme extends StandardScheme<paySign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, paySign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ztravel.paygate.thrift.model.PaySignResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, paySign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class paySign_resultTupleSchemeFactory implements SchemeFactory {
      public paySign_resultTupleScheme getScheme() {
        return new paySign_resultTupleScheme();
      }
    }

    private static class paySign_resultTupleScheme extends TupleScheme<paySign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, paySign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, paySign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.ztravel.paygate.thrift.model.PaySignResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class payValSign_args implements org.apache.thrift.TBase<payValSign_args, payValSign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payValSign_args");

    private static final org.apache.thrift.protocol.TField VAL_SIGN_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("valSignRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payValSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payValSign_argsTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAL_SIGN_REQUEST((short)1, "valSignRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAL_SIGN_REQUEST
            return VAL_SIGN_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAL_SIGN_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("valSignRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.ValSignRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payValSign_args.class, metaDataMap);
    }

    public payValSign_args() {
    }

    public payValSign_args(
      com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest)
    {
      this();
      this.valSignRequest = valSignRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payValSign_args(payValSign_args other) {
      if (other.isSetValSignRequest()) {
        this.valSignRequest = new com.ztravel.paygate.thrift.model.ValSignRequest(other.valSignRequest);
      }
    }

    public payValSign_args deepCopy() {
      return new payValSign_args(this);
    }

    @Override
    public void clear() {
      this.valSignRequest = null;
    }

    public com.ztravel.paygate.thrift.model.ValSignRequest getValSignRequest() {
      return this.valSignRequest;
    }

    public payValSign_args setValSignRequest(com.ztravel.paygate.thrift.model.ValSignRequest valSignRequest) {
      this.valSignRequest = valSignRequest;
      return this;
    }

    public void unsetValSignRequest() {
      this.valSignRequest = null;
    }

    /** Returns true if field valSignRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetValSignRequest() {
      return this.valSignRequest != null;
    }

    public void setValSignRequestIsSet(boolean value) {
      if (!value) {
        this.valSignRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VAL_SIGN_REQUEST:
        if (value == null) {
          unsetValSignRequest();
        } else {
          setValSignRequest((com.ztravel.paygate.thrift.model.ValSignRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VAL_SIGN_REQUEST:
        return getValSignRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VAL_SIGN_REQUEST:
        return isSetValSignRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payValSign_args)
        return this.equals((payValSign_args)that);
      return false;
    }

    public boolean equals(payValSign_args that) {
      if (that == null)
        return false;

      boolean this_present_valSignRequest = true && this.isSetValSignRequest();
      boolean that_present_valSignRequest = true && that.isSetValSignRequest();
      if (this_present_valSignRequest || that_present_valSignRequest) {
        if (!(this_present_valSignRequest && that_present_valSignRequest))
          return false;
        if (!this.valSignRequest.equals(that.valSignRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(payValSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      payValSign_args typedOther = (payValSign_args)other;

      lastComparison = Boolean.valueOf(isSetValSignRequest()).compareTo(typedOther.isSetValSignRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValSignRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valSignRequest, typedOther.valSignRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payValSign_args(");
      boolean first = true;

      sb.append("valSignRequest:");
      if (this.valSignRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.valSignRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (valSignRequest != null) {
        valSignRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payValSign_argsStandardSchemeFactory implements SchemeFactory {
      public payValSign_argsStandardScheme getScheme() {
        return new payValSign_argsStandardScheme();
      }
    }

    private static class payValSign_argsStandardScheme extends StandardScheme<payValSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payValSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAL_SIGN_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.valSignRequest = new com.ztravel.paygate.thrift.model.ValSignRequest();
                struct.valSignRequest.read(iprot);
                struct.setValSignRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payValSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.valSignRequest != null) {
          oprot.writeFieldBegin(VAL_SIGN_REQUEST_FIELD_DESC);
          struct.valSignRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payValSign_argsTupleSchemeFactory implements SchemeFactory {
      public payValSign_argsTupleScheme getScheme() {
        return new payValSign_argsTupleScheme();
      }
    }

    private static class payValSign_argsTupleScheme extends TupleScheme<payValSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payValSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValSignRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValSignRequest()) {
          struct.valSignRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payValSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.valSignRequest = new com.ztravel.paygate.thrift.model.ValSignRequest();
          struct.valSignRequest.read(iprot);
          struct.setValSignRequestIsSet(true);
        }
      }
    }

  }

  public static class payValSign_result implements org.apache.thrift.TBase<payValSign_result, payValSign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("payValSign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new payValSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new payValSign_resultTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.ValSignResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.ValSignResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(payValSign_result.class, metaDataMap);
    }

    public payValSign_result() {
    }

    public payValSign_result(
      com.ztravel.paygate.thrift.model.ValSignResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public payValSign_result(payValSign_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ztravel.paygate.thrift.model.ValSignResponse(other.success);
      }
    }

    public payValSign_result deepCopy() {
      return new payValSign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.ztravel.paygate.thrift.model.ValSignResponse getSuccess() {
      return this.success;
    }

    public payValSign_result setSuccess(com.ztravel.paygate.thrift.model.ValSignResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ztravel.paygate.thrift.model.ValSignResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof payValSign_result)
        return this.equals((payValSign_result)that);
      return false;
    }

    public boolean equals(payValSign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(payValSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      payValSign_result typedOther = (payValSign_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("payValSign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class payValSign_resultStandardSchemeFactory implements SchemeFactory {
      public payValSign_resultStandardScheme getScheme() {
        return new payValSign_resultStandardScheme();
      }
    }

    private static class payValSign_resultStandardScheme extends StandardScheme<payValSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, payValSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ztravel.paygate.thrift.model.ValSignResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, payValSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class payValSign_resultTupleSchemeFactory implements SchemeFactory {
      public payValSign_resultTupleScheme getScheme() {
        return new payValSign_resultTupleScheme();
      }
    }

    private static class payValSign_resultTupleScheme extends TupleScheme<payValSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, payValSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, payValSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.ztravel.paygate.thrift.model.ValSignResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class query_args implements org.apache.thrift.TBase<query_args, query_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_args");

    private static final org.apache.thrift.protocol.TField QUERY_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("queryRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_argsTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.QueryRequest queryRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      QUERY_REQUEST((short)1, "queryRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY_REQUEST
            return QUERY_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("queryRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.QueryRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_args.class, metaDataMap);
    }

    public query_args() {
    }

    public query_args(
      com.ztravel.paygate.thrift.model.QueryRequest queryRequest)
    {
      this();
      this.queryRequest = queryRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_args(query_args other) {
      if (other.isSetQueryRequest()) {
        this.queryRequest = new com.ztravel.paygate.thrift.model.QueryRequest(other.queryRequest);
      }
    }

    public query_args deepCopy() {
      return new query_args(this);
    }

    @Override
    public void clear() {
      this.queryRequest = null;
    }

    public com.ztravel.paygate.thrift.model.QueryRequest getQueryRequest() {
      return this.queryRequest;
    }

    public query_args setQueryRequest(com.ztravel.paygate.thrift.model.QueryRequest queryRequest) {
      this.queryRequest = queryRequest;
      return this;
    }

    public void unsetQueryRequest() {
      this.queryRequest = null;
    }

    /** Returns true if field queryRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetQueryRequest() {
      return this.queryRequest != null;
    }

    public void setQueryRequestIsSet(boolean value) {
      if (!value) {
        this.queryRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY_REQUEST:
        if (value == null) {
          unsetQueryRequest();
        } else {
          setQueryRequest((com.ztravel.paygate.thrift.model.QueryRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY_REQUEST:
        return getQueryRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY_REQUEST:
        return isSetQueryRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_args)
        return this.equals((query_args)that);
      return false;
    }

    public boolean equals(query_args that) {
      if (that == null)
        return false;

      boolean this_present_queryRequest = true && this.isSetQueryRequest();
      boolean that_present_queryRequest = true && that.isSetQueryRequest();
      if (this_present_queryRequest || that_present_queryRequest) {
        if (!(this_present_queryRequest && that_present_queryRequest))
          return false;
        if (!this.queryRequest.equals(that.queryRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_args typedOther = (query_args)other;

      lastComparison = Boolean.valueOf(isSetQueryRequest()).compareTo(typedOther.isSetQueryRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueryRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queryRequest, typedOther.queryRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_args(");
      boolean first = true;

      sb.append("queryRequest:");
      if (this.queryRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.queryRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (queryRequest != null) {
        queryRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_argsStandardSchemeFactory implements SchemeFactory {
      public query_argsStandardScheme getScheme() {
        return new query_argsStandardScheme();
      }
    }

    private static class query_argsStandardScheme extends StandardScheme<query_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.queryRequest = new com.ztravel.paygate.thrift.model.QueryRequest();
                struct.queryRequest.read(iprot);
                struct.setQueryRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.queryRequest != null) {
          oprot.writeFieldBegin(QUERY_REQUEST_FIELD_DESC);
          struct.queryRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_argsTupleSchemeFactory implements SchemeFactory {
      public query_argsTupleScheme getScheme() {
        return new query_argsTupleScheme();
      }
    }

    private static class query_argsTupleScheme extends TupleScheme<query_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQueryRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQueryRequest()) {
          struct.queryRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.queryRequest = new com.ztravel.paygate.thrift.model.QueryRequest();
          struct.queryRequest.read(iprot);
          struct.setQueryRequestIsSet(true);
        }
      }
    }

  }

  public static class query_result implements org.apache.thrift.TBase<query_result, query_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("query_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new query_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new query_resultTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.QueryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.QueryResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(query_result.class, metaDataMap);
    }

    public query_result() {
    }

    public query_result(
      com.ztravel.paygate.thrift.model.QueryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public query_result(query_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ztravel.paygate.thrift.model.QueryResponse(other.success);
      }
    }

    public query_result deepCopy() {
      return new query_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.ztravel.paygate.thrift.model.QueryResponse getSuccess() {
      return this.success;
    }

    public query_result setSuccess(com.ztravel.paygate.thrift.model.QueryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ztravel.paygate.thrift.model.QueryResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof query_result)
        return this.equals((query_result)that);
      return false;
    }

    public boolean equals(query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      query_result typedOther = (query_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class query_resultStandardSchemeFactory implements SchemeFactory {
      public query_resultStandardScheme getScheme() {
        return new query_resultStandardScheme();
      }
    }

    private static class query_resultStandardScheme extends StandardScheme<query_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, query_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ztravel.paygate.thrift.model.QueryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, query_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class query_resultTupleSchemeFactory implements SchemeFactory {
      public query_resultTupleScheme getScheme() {
        return new query_resultTupleScheme();
      }
    }

    private static class query_resultTupleScheme extends TupleScheme<query_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, query_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.ztravel.paygate.thrift.model.QueryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refund_args implements org.apache.thrift.TBase<refund_args, refund_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refund_args");

    private static final org.apache.thrift.protocol.TField REFUND_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("refundRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refund_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refund_argsTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.RefundRequest refundRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_REQUEST((short)1, "refundRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_REQUEST
            return REFUND_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("refundRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.RefundRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refund_args.class, metaDataMap);
    }

    public refund_args() {
    }

    public refund_args(
      com.ztravel.paygate.thrift.model.RefundRequest refundRequest)
    {
      this();
      this.refundRequest = refundRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refund_args(refund_args other) {
      if (other.isSetRefundRequest()) {
        this.refundRequest = new com.ztravel.paygate.thrift.model.RefundRequest(other.refundRequest);
      }
    }

    public refund_args deepCopy() {
      return new refund_args(this);
    }

    @Override
    public void clear() {
      this.refundRequest = null;
    }

    public com.ztravel.paygate.thrift.model.RefundRequest getRefundRequest() {
      return this.refundRequest;
    }

    public refund_args setRefundRequest(com.ztravel.paygate.thrift.model.RefundRequest refundRequest) {
      this.refundRequest = refundRequest;
      return this;
    }

    public void unsetRefundRequest() {
      this.refundRequest = null;
    }

    /** Returns true if field refundRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundRequest() {
      return this.refundRequest != null;
    }

    public void setRefundRequestIsSet(boolean value) {
      if (!value) {
        this.refundRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_REQUEST:
        if (value == null) {
          unsetRefundRequest();
        } else {
          setRefundRequest((com.ztravel.paygate.thrift.model.RefundRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_REQUEST:
        return getRefundRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_REQUEST:
        return isSetRefundRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refund_args)
        return this.equals((refund_args)that);
      return false;
    }

    public boolean equals(refund_args that) {
      if (that == null)
        return false;

      boolean this_present_refundRequest = true && this.isSetRefundRequest();
      boolean that_present_refundRequest = true && that.isSetRefundRequest();
      if (this_present_refundRequest || that_present_refundRequest) {
        if (!(this_present_refundRequest && that_present_refundRequest))
          return false;
        if (!this.refundRequest.equals(that.refundRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refund_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refund_args typedOther = (refund_args)other;

      lastComparison = Boolean.valueOf(isSetRefundRequest()).compareTo(typedOther.isSetRefundRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundRequest, typedOther.refundRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refund_args(");
      boolean first = true;

      sb.append("refundRequest:");
      if (this.refundRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.refundRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundRequest != null) {
        refundRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refund_argsStandardSchemeFactory implements SchemeFactory {
      public refund_argsStandardScheme getScheme() {
        return new refund_argsStandardScheme();
      }
    }

    private static class refund_argsStandardScheme extends StandardScheme<refund_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refund_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundRequest = new com.ztravel.paygate.thrift.model.RefundRequest();
                struct.refundRequest.read(iprot);
                struct.setRefundRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refund_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundRequest != null) {
          oprot.writeFieldBegin(REFUND_REQUEST_FIELD_DESC);
          struct.refundRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refund_argsTupleSchemeFactory implements SchemeFactory {
      public refund_argsTupleScheme getScheme() {
        return new refund_argsTupleScheme();
      }
    }

    private static class refund_argsTupleScheme extends TupleScheme<refund_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundRequest()) {
          struct.refundRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refund_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundRequest = new com.ztravel.paygate.thrift.model.RefundRequest();
          struct.refundRequest.read(iprot);
          struct.setRefundRequestIsSet(true);
        }
      }
    }

  }

  public static class refund_result implements org.apache.thrift.TBase<refund_result, refund_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refund_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refund_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refund_resultTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.RefundResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.RefundResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refund_result.class, metaDataMap);
    }

    public refund_result() {
    }

    public refund_result(
      com.ztravel.paygate.thrift.model.RefundResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refund_result(refund_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ztravel.paygate.thrift.model.RefundResponse(other.success);
      }
    }

    public refund_result deepCopy() {
      return new refund_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.ztravel.paygate.thrift.model.RefundResponse getSuccess() {
      return this.success;
    }

    public refund_result setSuccess(com.ztravel.paygate.thrift.model.RefundResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ztravel.paygate.thrift.model.RefundResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refund_result)
        return this.equals((refund_result)that);
      return false;
    }

    public boolean equals(refund_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refund_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refund_result typedOther = (refund_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refund_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refund_resultStandardSchemeFactory implements SchemeFactory {
      public refund_resultStandardScheme getScheme() {
        return new refund_resultStandardScheme();
      }
    }

    private static class refund_resultStandardScheme extends StandardScheme<refund_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refund_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ztravel.paygate.thrift.model.RefundResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refund_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refund_resultTupleSchemeFactory implements SchemeFactory {
      public refund_resultTupleScheme getScheme() {
        return new refund_resultTupleScheme();
      }
    }

    private static class refund_resultTupleScheme extends TupleScheme<refund_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refund_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.ztravel.paygate.thrift.model.RefundResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refundQuery_args implements org.apache.thrift.TBase<refundQuery_args, refundQuery_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundQuery_args");

    private static final org.apache.thrift.protocol.TField REFUND_QUERY_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("refundQueryRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundQuery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundQuery_argsTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REFUND_QUERY_REQUEST((short)1, "refundQueryRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REFUND_QUERY_REQUEST
            return REFUND_QUERY_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REFUND_QUERY_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("refundQueryRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.RefundQueryRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundQuery_args.class, metaDataMap);
    }

    public refundQuery_args() {
    }

    public refundQuery_args(
      com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest)
    {
      this();
      this.refundQueryRequest = refundQueryRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundQuery_args(refundQuery_args other) {
      if (other.isSetRefundQueryRequest()) {
        this.refundQueryRequest = new com.ztravel.paygate.thrift.model.RefundQueryRequest(other.refundQueryRequest);
      }
    }

    public refundQuery_args deepCopy() {
      return new refundQuery_args(this);
    }

    @Override
    public void clear() {
      this.refundQueryRequest = null;
    }

    public com.ztravel.paygate.thrift.model.RefundQueryRequest getRefundQueryRequest() {
      return this.refundQueryRequest;
    }

    public refundQuery_args setRefundQueryRequest(com.ztravel.paygate.thrift.model.RefundQueryRequest refundQueryRequest) {
      this.refundQueryRequest = refundQueryRequest;
      return this;
    }

    public void unsetRefundQueryRequest() {
      this.refundQueryRequest = null;
    }

    /** Returns true if field refundQueryRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetRefundQueryRequest() {
      return this.refundQueryRequest != null;
    }

    public void setRefundQueryRequestIsSet(boolean value) {
      if (!value) {
        this.refundQueryRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REFUND_QUERY_REQUEST:
        if (value == null) {
          unsetRefundQueryRequest();
        } else {
          setRefundQueryRequest((com.ztravel.paygate.thrift.model.RefundQueryRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REFUND_QUERY_REQUEST:
        return getRefundQueryRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REFUND_QUERY_REQUEST:
        return isSetRefundQueryRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundQuery_args)
        return this.equals((refundQuery_args)that);
      return false;
    }

    public boolean equals(refundQuery_args that) {
      if (that == null)
        return false;

      boolean this_present_refundQueryRequest = true && this.isSetRefundQueryRequest();
      boolean that_present_refundQueryRequest = true && that.isSetRefundQueryRequest();
      if (this_present_refundQueryRequest || that_present_refundQueryRequest) {
        if (!(this_present_refundQueryRequest && that_present_refundQueryRequest))
          return false;
        if (!this.refundQueryRequest.equals(that.refundQueryRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refundQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refundQuery_args typedOther = (refundQuery_args)other;

      lastComparison = Boolean.valueOf(isSetRefundQueryRequest()).compareTo(typedOther.isSetRefundQueryRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRefundQueryRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.refundQueryRequest, typedOther.refundQueryRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundQuery_args(");
      boolean first = true;

      sb.append("refundQueryRequest:");
      if (this.refundQueryRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.refundQueryRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (refundQueryRequest != null) {
        refundQueryRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundQuery_argsStandardSchemeFactory implements SchemeFactory {
      public refundQuery_argsStandardScheme getScheme() {
        return new refundQuery_argsStandardScheme();
      }
    }

    private static class refundQuery_argsStandardScheme extends StandardScheme<refundQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REFUND_QUERY_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.refundQueryRequest = new com.ztravel.paygate.thrift.model.RefundQueryRequest();
                struct.refundQueryRequest.read(iprot);
                struct.setRefundQueryRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.refundQueryRequest != null) {
          oprot.writeFieldBegin(REFUND_QUERY_REQUEST_FIELD_DESC);
          struct.refundQueryRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundQuery_argsTupleSchemeFactory implements SchemeFactory {
      public refundQuery_argsTupleScheme getScheme() {
        return new refundQuery_argsTupleScheme();
      }
    }

    private static class refundQuery_argsTupleScheme extends TupleScheme<refundQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRefundQueryRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRefundQueryRequest()) {
          struct.refundQueryRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundQuery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.refundQueryRequest = new com.ztravel.paygate.thrift.model.RefundQueryRequest();
          struct.refundQueryRequest.read(iprot);
          struct.setRefundQueryRequestIsSet(true);
        }
      }
    }

  }

  public static class refundQuery_result implements org.apache.thrift.TBase<refundQuery_result, refundQuery_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundQuery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundQuery_resultTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.RefundQueryResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.RefundQueryResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundQuery_result.class, metaDataMap);
    }

    public refundQuery_result() {
    }

    public refundQuery_result(
      com.ztravel.paygate.thrift.model.RefundQueryResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundQuery_result(refundQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ztravel.paygate.thrift.model.RefundQueryResponse(other.success);
      }
    }

    public refundQuery_result deepCopy() {
      return new refundQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.ztravel.paygate.thrift.model.RefundQueryResponse getSuccess() {
      return this.success;
    }

    public refundQuery_result setSuccess(com.ztravel.paygate.thrift.model.RefundQueryResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ztravel.paygate.thrift.model.RefundQueryResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundQuery_result)
        return this.equals((refundQuery_result)that);
      return false;
    }

    public boolean equals(refundQuery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refundQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refundQuery_result typedOther = (refundQuery_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundQuery_resultStandardSchemeFactory implements SchemeFactory {
      public refundQuery_resultStandardScheme getScheme() {
        return new refundQuery_resultStandardScheme();
      }
    }

    private static class refundQuery_resultStandardScheme extends StandardScheme<refundQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ztravel.paygate.thrift.model.RefundQueryResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundQuery_resultTupleSchemeFactory implements SchemeFactory {
      public refundQuery_resultTupleScheme getScheme() {
        return new refundQuery_resultTupleScheme();
      }
    }

    private static class refundQuery_resultTupleScheme extends TupleScheme<refundQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundQuery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.ztravel.paygate.thrift.model.RefundQueryResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class refundValSign_args implements org.apache.thrift.TBase<refundValSign_args, refundValSign_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundValSign_args");

    private static final org.apache.thrift.protocol.TField VAL_SIGN_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("valSignRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundValSign_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundValSign_argsTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VAL_SIGN_REQUEST((short)1, "valSignRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VAL_SIGN_REQUEST
            return VAL_SIGN_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VAL_SIGN_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("valSignRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.RefundValSignRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundValSign_args.class, metaDataMap);
    }

    public refundValSign_args() {
    }

    public refundValSign_args(
      com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest)
    {
      this();
      this.valSignRequest = valSignRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundValSign_args(refundValSign_args other) {
      if (other.isSetValSignRequest()) {
        this.valSignRequest = new com.ztravel.paygate.thrift.model.RefundValSignRequest(other.valSignRequest);
      }
    }

    public refundValSign_args deepCopy() {
      return new refundValSign_args(this);
    }

    @Override
    public void clear() {
      this.valSignRequest = null;
    }

    public com.ztravel.paygate.thrift.model.RefundValSignRequest getValSignRequest() {
      return this.valSignRequest;
    }

    public refundValSign_args setValSignRequest(com.ztravel.paygate.thrift.model.RefundValSignRequest valSignRequest) {
      this.valSignRequest = valSignRequest;
      return this;
    }

    public void unsetValSignRequest() {
      this.valSignRequest = null;
    }

    /** Returns true if field valSignRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetValSignRequest() {
      return this.valSignRequest != null;
    }

    public void setValSignRequestIsSet(boolean value) {
      if (!value) {
        this.valSignRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VAL_SIGN_REQUEST:
        if (value == null) {
          unsetValSignRequest();
        } else {
          setValSignRequest((com.ztravel.paygate.thrift.model.RefundValSignRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VAL_SIGN_REQUEST:
        return getValSignRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VAL_SIGN_REQUEST:
        return isSetValSignRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundValSign_args)
        return this.equals((refundValSign_args)that);
      return false;
    }

    public boolean equals(refundValSign_args that) {
      if (that == null)
        return false;

      boolean this_present_valSignRequest = true && this.isSetValSignRequest();
      boolean that_present_valSignRequest = true && that.isSetValSignRequest();
      if (this_present_valSignRequest || that_present_valSignRequest) {
        if (!(this_present_valSignRequest && that_present_valSignRequest))
          return false;
        if (!this.valSignRequest.equals(that.valSignRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refundValSign_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refundValSign_args typedOther = (refundValSign_args)other;

      lastComparison = Boolean.valueOf(isSetValSignRequest()).compareTo(typedOther.isSetValSignRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValSignRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valSignRequest, typedOther.valSignRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundValSign_args(");
      boolean first = true;

      sb.append("valSignRequest:");
      if (this.valSignRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.valSignRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (valSignRequest != null) {
        valSignRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundValSign_argsStandardSchemeFactory implements SchemeFactory {
      public refundValSign_argsStandardScheme getScheme() {
        return new refundValSign_argsStandardScheme();
      }
    }

    private static class refundValSign_argsStandardScheme extends StandardScheme<refundValSign_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundValSign_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VAL_SIGN_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.valSignRequest = new com.ztravel.paygate.thrift.model.RefundValSignRequest();
                struct.valSignRequest.read(iprot);
                struct.setValSignRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundValSign_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.valSignRequest != null) {
          oprot.writeFieldBegin(VAL_SIGN_REQUEST_FIELD_DESC);
          struct.valSignRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundValSign_argsTupleSchemeFactory implements SchemeFactory {
      public refundValSign_argsTupleScheme getScheme() {
        return new refundValSign_argsTupleScheme();
      }
    }

    private static class refundValSign_argsTupleScheme extends TupleScheme<refundValSign_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundValSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetValSignRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetValSignRequest()) {
          struct.valSignRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundValSign_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.valSignRequest = new com.ztravel.paygate.thrift.model.RefundValSignRequest();
          struct.valSignRequest.read(iprot);
          struct.setValSignRequestIsSet(true);
        }
      }
    }

  }

  public static class refundValSign_result implements org.apache.thrift.TBase<refundValSign_result, refundValSign_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refundValSign_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new refundValSign_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new refundValSign_resultTupleSchemeFactory());
    }

    public com.ztravel.paygate.thrift.model.RefundValSignResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.ztravel.paygate.thrift.model.RefundValSignResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refundValSign_result.class, metaDataMap);
    }

    public refundValSign_result() {
    }

    public refundValSign_result(
      com.ztravel.paygate.thrift.model.RefundValSignResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refundValSign_result(refundValSign_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.ztravel.paygate.thrift.model.RefundValSignResponse(other.success);
      }
    }

    public refundValSign_result deepCopy() {
      return new refundValSign_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.ztravel.paygate.thrift.model.RefundValSignResponse getSuccess() {
      return this.success;
    }

    public refundValSign_result setSuccess(com.ztravel.paygate.thrift.model.RefundValSignResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.ztravel.paygate.thrift.model.RefundValSignResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof refundValSign_result)
        return this.equals((refundValSign_result)that);
      return false;
    }

    public boolean equals(refundValSign_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(refundValSign_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      refundValSign_result typedOther = (refundValSign_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("refundValSign_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refundValSign_resultStandardSchemeFactory implements SchemeFactory {
      public refundValSign_resultStandardScheme getScheme() {
        return new refundValSign_resultStandardScheme();
      }
    }

    private static class refundValSign_resultStandardScheme extends StandardScheme<refundValSign_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refundValSign_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.ztravel.paygate.thrift.model.RefundValSignResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refundValSign_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refundValSign_resultTupleSchemeFactory implements SchemeFactory {
      public refundValSign_resultTupleScheme getScheme() {
        return new refundValSign_resultTupleScheme();
      }
    }

    private static class refundValSign_resultTupleScheme extends TupleScheme<refundValSign_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refundValSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refundValSign_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.ztravel.paygate.thrift.model.RefundValSignResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
