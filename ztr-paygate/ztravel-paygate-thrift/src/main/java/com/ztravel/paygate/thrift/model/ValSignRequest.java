/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ztravel.paygate.thrift.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 验签请求
 */
public class ValSignRequest implements org.apache.thrift.TBase<ValSignRequest, ValSignRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ValSignRequest");

  private static final org.apache.thrift.protocol.TField PARTNER_FIELD_DESC = new org.apache.thrift.protocol.TField("partner", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FG_NOTIFY_FIELD_DESC = new org.apache.thrift.protocol.TField("fgNotify", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField IS_MOBILE_PAY_FIELD_DESC = new org.apache.thrift.protocol.TField("isMobilePay", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField BANK_RESPONSE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("bankResponseData", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ValSignRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ValSignRequestTupleSchemeFactory());
  }

  /**
   * partner
   */
  public String partner; // optional
  /**
   * 是否前台返回结果（前后台验签方式有所不同）
   */
  public boolean fgNotify; // required
  /**
   * 是否手机支付
   */
  public boolean isMobilePay; // optional
  /**
   * 银行的返回结果
   */
  public Map<String,String> bankResponseData; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * partner
     */
    PARTNER((short)1, "partner"),
    /**
     * 是否前台返回结果（前后台验签方式有所不同）
     */
    FG_NOTIFY((short)2, "fgNotify"),
    /**
     * 是否手机支付
     */
    IS_MOBILE_PAY((short)3, "isMobilePay"),
    /**
     * 银行的返回结果
     */
    BANK_RESPONSE_DATA((short)4, "bankResponseData");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARTNER
          return PARTNER;
        case 2: // FG_NOTIFY
          return FG_NOTIFY;
        case 3: // IS_MOBILE_PAY
          return IS_MOBILE_PAY;
        case 4: // BANK_RESPONSE_DATA
          return BANK_RESPONSE_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FGNOTIFY_ISSET_ID = 0;
  private static final int __ISMOBILEPAY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PARTNER,_Fields.IS_MOBILE_PAY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARTNER, new org.apache.thrift.meta_data.FieldMetaData("partner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FG_NOTIFY, new org.apache.thrift.meta_data.FieldMetaData("fgNotify", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MOBILE_PAY, new org.apache.thrift.meta_data.FieldMetaData("isMobilePay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BANK_RESPONSE_DATA, new org.apache.thrift.meta_data.FieldMetaData("bankResponseData", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ValSignRequest.class, metaDataMap);
  }

  public ValSignRequest() {
    this.isMobilePay = false;

  }

  public ValSignRequest(
    boolean fgNotify,
    Map<String,String> bankResponseData)
  {
    this();
    this.fgNotify = fgNotify;
    setFgNotifyIsSet(true);
    this.bankResponseData = bankResponseData;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ValSignRequest(ValSignRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPartner()) {
      this.partner = other.partner;
    }
    this.fgNotify = other.fgNotify;
    this.isMobilePay = other.isMobilePay;
    if (other.isSetBankResponseData()) {
      Map<String,String> __this__bankResponseData = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.bankResponseData.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__bankResponseData_copy_key = other_element_key;

        String __this__bankResponseData_copy_value = other_element_value;

        __this__bankResponseData.put(__this__bankResponseData_copy_key, __this__bankResponseData_copy_value);
      }
      this.bankResponseData = __this__bankResponseData;
    }
  }

  public ValSignRequest deepCopy() {
    return new ValSignRequest(this);
  }

  @Override
  public void clear() {
    this.partner = null;
    setFgNotifyIsSet(false);
    this.fgNotify = false;
    this.isMobilePay = false;

    this.bankResponseData = null;
  }

  /**
   * partner
   */
  public String getPartner() {
    return this.partner;
  }

  /**
   * partner
   */
  public ValSignRequest setPartner(String partner) {
    this.partner = partner;
    return this;
  }

  public void unsetPartner() {
    this.partner = null;
  }

  /** Returns true if field partner is set (has been assigned a value) and false otherwise */
  public boolean isSetPartner() {
    return this.partner != null;
  }

  public void setPartnerIsSet(boolean value) {
    if (!value) {
      this.partner = null;
    }
  }

  /**
   * 是否前台返回结果（前后台验签方式有所不同）
   */
  public boolean isFgNotify() {
    return this.fgNotify;
  }

  /**
   * 是否前台返回结果（前后台验签方式有所不同）
   */
  public ValSignRequest setFgNotify(boolean fgNotify) {
    this.fgNotify = fgNotify;
    setFgNotifyIsSet(true);
    return this;
  }

  public void unsetFgNotify() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FGNOTIFY_ISSET_ID);
  }

  /** Returns true if field fgNotify is set (has been assigned a value) and false otherwise */
  public boolean isSetFgNotify() {
    return EncodingUtils.testBit(__isset_bitfield, __FGNOTIFY_ISSET_ID);
  }

  public void setFgNotifyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FGNOTIFY_ISSET_ID, value);
  }

  /**
   * 是否手机支付
   */
  public boolean isIsMobilePay() {
    return this.isMobilePay;
  }

  /**
   * 是否手机支付
   */
  public ValSignRequest setIsMobilePay(boolean isMobilePay) {
    this.isMobilePay = isMobilePay;
    setIsMobilePayIsSet(true);
    return this;
  }

  public void unsetIsMobilePay() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMOBILEPAY_ISSET_ID);
  }

  /** Returns true if field isMobilePay is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMobilePay() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMOBILEPAY_ISSET_ID);
  }

  public void setIsMobilePayIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMOBILEPAY_ISSET_ID, value);
  }

  public int getBankResponseDataSize() {
    return (this.bankResponseData == null) ? 0 : this.bankResponseData.size();
  }

  public void putToBankResponseData(String key, String val) {
    if (this.bankResponseData == null) {
      this.bankResponseData = new HashMap<String,String>();
    }
    this.bankResponseData.put(key, val);
  }

  /**
   * 银行的返回结果
   */
  public Map<String,String> getBankResponseData() {
    return this.bankResponseData;
  }

  /**
   * 银行的返回结果
   */
  public ValSignRequest setBankResponseData(Map<String,String> bankResponseData) {
    this.bankResponseData = bankResponseData;
    return this;
  }

  public void unsetBankResponseData() {
    this.bankResponseData = null;
  }

  /** Returns true if field bankResponseData is set (has been assigned a value) and false otherwise */
  public boolean isSetBankResponseData() {
    return this.bankResponseData != null;
  }

  public void setBankResponseDataIsSet(boolean value) {
    if (!value) {
      this.bankResponseData = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARTNER:
      if (value == null) {
        unsetPartner();
      } else {
        setPartner((String)value);
      }
      break;

    case FG_NOTIFY:
      if (value == null) {
        unsetFgNotify();
      } else {
        setFgNotify((Boolean)value);
      }
      break;

    case IS_MOBILE_PAY:
      if (value == null) {
        unsetIsMobilePay();
      } else {
        setIsMobilePay((Boolean)value);
      }
      break;

    case BANK_RESPONSE_DATA:
      if (value == null) {
        unsetBankResponseData();
      } else {
        setBankResponseData((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARTNER:
      return getPartner();

    case FG_NOTIFY:
      return Boolean.valueOf(isFgNotify());

    case IS_MOBILE_PAY:
      return Boolean.valueOf(isIsMobilePay());

    case BANK_RESPONSE_DATA:
      return getBankResponseData();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARTNER:
      return isSetPartner();
    case FG_NOTIFY:
      return isSetFgNotify();
    case IS_MOBILE_PAY:
      return isSetIsMobilePay();
    case BANK_RESPONSE_DATA:
      return isSetBankResponseData();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ValSignRequest)
      return this.equals((ValSignRequest)that);
    return false;
  }

  public boolean equals(ValSignRequest that) {
    if (that == null)
      return false;

    boolean this_present_partner = true && this.isSetPartner();
    boolean that_present_partner = true && that.isSetPartner();
    if (this_present_partner || that_present_partner) {
      if (!(this_present_partner && that_present_partner))
        return false;
      if (!this.partner.equals(that.partner))
        return false;
    }

    boolean this_present_fgNotify = true;
    boolean that_present_fgNotify = true;
    if (this_present_fgNotify || that_present_fgNotify) {
      if (!(this_present_fgNotify && that_present_fgNotify))
        return false;
      if (this.fgNotify != that.fgNotify)
        return false;
    }

    boolean this_present_isMobilePay = true && this.isSetIsMobilePay();
    boolean that_present_isMobilePay = true && that.isSetIsMobilePay();
    if (this_present_isMobilePay || that_present_isMobilePay) {
      if (!(this_present_isMobilePay && that_present_isMobilePay))
        return false;
      if (this.isMobilePay != that.isMobilePay)
        return false;
    }

    boolean this_present_bankResponseData = true && this.isSetBankResponseData();
    boolean that_present_bankResponseData = true && that.isSetBankResponseData();
    if (this_present_bankResponseData || that_present_bankResponseData) {
      if (!(this_present_bankResponseData && that_present_bankResponseData))
        return false;
      if (!this.bankResponseData.equals(that.bankResponseData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ValSignRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ValSignRequest typedOther = (ValSignRequest)other;

    lastComparison = Boolean.valueOf(isSetPartner()).compareTo(typedOther.isSetPartner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partner, typedOther.partner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFgNotify()).compareTo(typedOther.isSetFgNotify());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFgNotify()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fgNotify, typedOther.fgNotify);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMobilePay()).compareTo(typedOther.isSetIsMobilePay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMobilePay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMobilePay, typedOther.isMobilePay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBankResponseData()).compareTo(typedOther.isSetBankResponseData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBankResponseData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bankResponseData, typedOther.bankResponseData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ValSignRequest(");
    boolean first = true;

    if (isSetPartner()) {
      sb.append("partner:");
      if (this.partner == null) {
        sb.append("null");
      } else {
        sb.append(this.partner);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("fgNotify:");
    sb.append(this.fgNotify);
    first = false;
    if (isSetIsMobilePay()) {
      if (!first) sb.append(", ");
      sb.append("isMobilePay:");
      sb.append(this.isMobilePay);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("bankResponseData:");
    if (this.bankResponseData == null) {
      sb.append("null");
    } else {
      sb.append(this.bankResponseData);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'fgNotify' because it's a primitive and you chose the non-beans generator.
    if (bankResponseData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'bankResponseData' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ValSignRequestStandardSchemeFactory implements SchemeFactory {
    public ValSignRequestStandardScheme getScheme() {
      return new ValSignRequestStandardScheme();
    }
  }

  private static class ValSignRequestStandardScheme extends StandardScheme<ValSignRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ValSignRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARTNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.partner = iprot.readString();
              struct.setPartnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FG_NOTIFY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.fgNotify = iprot.readBool();
              struct.setFgNotifyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_MOBILE_PAY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMobilePay = iprot.readBool();
              struct.setIsMobilePayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANK_RESPONSE_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.bankResponseData = new HashMap<String,String>(2*_map20.size);
                for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                {
                  String _key22; // required
                  String _val23; // required
                  _key22 = iprot.readString();
                  _val23 = iprot.readString();
                  struct.bankResponseData.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setBankResponseDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetFgNotify()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'fgNotify' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ValSignRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.partner != null) {
        if (struct.isSetPartner()) {
          oprot.writeFieldBegin(PARTNER_FIELD_DESC);
          oprot.writeString(struct.partner);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(FG_NOTIFY_FIELD_DESC);
      oprot.writeBool(struct.fgNotify);
      oprot.writeFieldEnd();
      if (struct.isSetIsMobilePay()) {
        oprot.writeFieldBegin(IS_MOBILE_PAY_FIELD_DESC);
        oprot.writeBool(struct.isMobilePay);
        oprot.writeFieldEnd();
      }
      if (struct.bankResponseData != null) {
        oprot.writeFieldBegin(BANK_RESPONSE_DATA_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.bankResponseData.size()));
          for (Map.Entry<String, String> _iter24 : struct.bankResponseData.entrySet())
          {
            oprot.writeString(_iter24.getKey());
            oprot.writeString(_iter24.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ValSignRequestTupleSchemeFactory implements SchemeFactory {
    public ValSignRequestTupleScheme getScheme() {
      return new ValSignRequestTupleScheme();
    }
  }

  private static class ValSignRequestTupleScheme extends TupleScheme<ValSignRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ValSignRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.fgNotify);
      {
        oprot.writeI32(struct.bankResponseData.size());
        for (Map.Entry<String, String> _iter25 : struct.bankResponseData.entrySet())
        {
          oprot.writeString(_iter25.getKey());
          oprot.writeString(_iter25.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetPartner()) {
        optionals.set(0);
      }
      if (struct.isSetIsMobilePay()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPartner()) {
        oprot.writeString(struct.partner);
      }
      if (struct.isSetIsMobilePay()) {
        oprot.writeBool(struct.isMobilePay);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ValSignRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.fgNotify = iprot.readBool();
      struct.setFgNotifyIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.bankResponseData = new HashMap<String,String>(2*_map26.size);
        for (int _i27 = 0; _i27 < _map26.size; ++_i27)
        {
          String _key28; // required
          String _val29; // required
          _key28 = iprot.readString();
          _val29 = iprot.readString();
          struct.bankResponseData.put(_key28, _val29);
        }
      }
      struct.setBankResponseDataIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.partner = iprot.readString();
        struct.setPartnerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isMobilePay = iprot.readBool();
        struct.setIsMobilePayIsSet(true);
      }
    }
  }

}

